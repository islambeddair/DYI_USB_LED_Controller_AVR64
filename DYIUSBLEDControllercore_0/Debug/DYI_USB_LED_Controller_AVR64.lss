
DYI_USB_LED_Controller_AVR64.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00806000  00001ba6  00001c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008060a8  008060a8  00001ce2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00001d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cb0d  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043ba  00000000  00000000  0000ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004770  00000000  00000000  000130e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000948  00000000  00000000  00017858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001d628  00000000  00000000  000181a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000439e  00000000  00000000  000357c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  00039b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008a0d  00000000  00000000  00039f36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
       4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      2c:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_11>
      30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      ac:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      bc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      cc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d4:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_53>
      d8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      dc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      e0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      e4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      e8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      ec:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      f0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      f4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      f8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      fc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
     100:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	df e7       	ldi	r29, 0x7F	; 127
     10e:	de bf       	out	0x3e, r29	; 62

00000110 <__do_copy_data>:
     110:	10 e6       	ldi	r17, 0x60	; 96
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b0 e6       	ldi	r27, 0x60	; 96
     116:	e6 ea       	ldi	r30, 0xA6	; 166
     118:	fb e1       	ldi	r31, 0x1B	; 27
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
     11c:	05 90       	lpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a8 3a       	cpi	r26, 0xA8	; 168
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
     126:	21 e6       	ldi	r18, 0x61	; 97
     128:	a8 ea       	ldi	r26, 0xA8	; 168
     12a:	b0 e6       	ldi	r27, 0x60	; 96
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a6 31       	cpi	r26, 0x16	; 22
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	0e 94 a4 00 	call	0x148	; 0x148 <main>
     13a:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <_exit>

0000013e <__bad_interrupt>:
     13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     142:	0e 94 e7 02 	call	0x5ce	; 0x5ce <system_init>
     146:	08 95       	ret

00000148 <main>:
#include <RGB.h>
unsigned char mode=0;
#define MAX_HIGH_ADDRESS 0xF0
#define MAX_LOW_ADDRESS  0xF0
int main(void)
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	c1 54       	subi	r28, 0x41	; 65
     152:	d1 09       	sbc	r29, r1
     154:	cd bf       	out	0x3d, r28	; 61
     156:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middle ware */
	cli();
     158:	f8 94       	cli
	atmel_start_init();
     15a:	0e 94 a1 00 	call	0x142	; 0x142 <atmel_start_init>
	RGB_init();
     15e:	0e 94 44 07 	call	0xe88	; 0xe88 <RGB_init>
	sei();
     162:	78 94       	sei
	 uint8_t device_number=(VPORTA.IN&0x0f);
     164:	82 b1       	in	r24, 0x02	; 2
     166:	8f 70       	andi	r24, 0x0F	; 15
     168:	88 2e       	mov	r8, r24
	// char str[]="hello world!\r\n";
	// printf("%s",str);
	// uint8_t i=0;while(str[i]){USART_0_write(str[i]);i++;}
	//Test_I2C();
	//printf("hello port 0\r\n");
	uint8_t led_row[RX_FRAME_SIZE+2]={0};
     16a:	fe 01       	movw	r30, r28
     16c:	31 96       	adiw	r30, 0x01	; 1
     16e:	8a e3       	ldi	r24, 0x3A	; 58
     170:	df 01       	movw	r26, r30
     172:	1d 92       	st	X+, r1
     174:	8a 95       	dec	r24
     176:	e9 f7       	brne	.-6      	; 0x172 <main+0x2a>
	uint8_t data_array[5]={0};
     178:	9e 01       	movw	r18, r28
     17a:	25 5c       	subi	r18, 0xC5	; 197
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	f9 01       	movw	r30, r18
     182:	11 92       	st	Z+, r1
     184:	8a 95       	dec	r24
     186:	e9 f7       	brne	.-6      	; 0x182 <main+0x3a>
	uint16_t row_num=0;
	uint16_t address=0;
	uint8_t address_arr[2];
	address_arr[0]=MAX_LOW_ADDRESS;
     188:	80 ef       	ldi	r24, 0xF0	; 240
     18a:	21 96       	adiw	r28, 0x01	; 1
     18c:	8f af       	std	Y+63, r24	; 0x3f
     18e:	21 97       	sbiw	r28, 0x01	; 1
	address_arr[1]=MAX_HIGH_ADDRESS;
     190:	22 96       	adiw	r28, 0x02	; 2
     192:	8f af       	std	Y+63, r24	; 0x3f
     194:	22 97       	sbiw	r28, 0x02	; 2
	i2c_error_t i2c_error_status=I2C_0_readDataBlock_EEPROM(SLAVE_ADRESS, address_arr, 2 , data_array, 2) ;
     196:	02 e0       	ldi	r16, 0x02	; 2
     198:	10 e0       	ldi	r17, 0x00	; 0
     19a:	42 e0       	ldi	r20, 0x02	; 2
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	be 01       	movw	r22, r28
     1a0:	60 5c       	subi	r22, 0xC0	; 192
     1a2:	7f 4f       	sbci	r23, 0xFF	; 255
     1a4:	80 e5       	ldi	r24, 0x50	; 80
     1a6:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_0_readDataBlock_EEPROM>
	if (i2c_error_status==I2C_NOERR)
     1aa:	81 11       	cpse	r24, r1
     1ac:	07 c0       	rjmp	.+14     	; 0x1bc <main+0x74>
	{
		max_row=data_array[1];
     1ae:	ac ac       	ldd	r10, Y+60	; 0x3c
     1b0:	b1 2c       	mov	r11, r1
		max_row=(max_row<<8)|data_array[0];
     1b2:	ba 2c       	mov	r11, r10
     1b4:	aa 24       	eor	r10, r10
     1b6:	8b ad       	ldd	r24, Y+59	; 0x3b
     1b8:	a8 2a       	or	r10, r24
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <main+0x78>
	cli();
	atmel_start_init();
	RGB_init();
	sei();
	 uint8_t device_number=(VPORTA.IN&0x0f);
	 uint16_t max_row=0;
     1bc:	a1 2c       	mov	r10, r1
     1be:	b1 2c       	mov	r11, r1
	if (i2c_error_status==I2C_NOERR)
	{
		max_row=data_array[1];
		max_row=(max_row<<8)|data_array[0];
	}
	printf("read max_row:%d\r\n",max_row);
     1c0:	bf 92       	push	r11
     1c2:	af 92       	push	r10
     1c4:	82 e3       	ldi	r24, 0x32	; 50
     1c6:	90 e6       	ldi	r25, 0x60	; 96
     1c8:	9f 93       	push	r25
     1ca:	8f 93       	push	r24
     1cc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <printf>
	if((max_row<0)||(max_row==0xffff))
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	ff ef       	ldi	r31, 0xFF	; 255
     1da:	af 16       	cp	r10, r31
     1dc:	bf 06       	cpc	r11, r31
     1de:	e1 f5       	brne	.+120    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
	{
		max_row=0;
		data_array[0]=MAX_LOW_ADDRESS;data_array[1]=MAX_HIGH_ADDRESS;
     1e0:	80 ef       	ldi	r24, 0xF0	; 240
     1e2:	8b af       	std	Y+59, r24	; 0x3b
     1e4:	8c af       	std	Y+60, r24	; 0x3c
		data_array[2]=0;data_array[3]=0;
     1e6:	1d ae       	std	Y+61, r1	; 0x3d
     1e8:	1e ae       	std	Y+62, r1	; 0x3e
		i2c_error_status=I2C_0_writeNBytes(SLAVE_ADRESS,data_array,4);
     1ea:	44 e0       	ldi	r20, 0x04	; 4
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	be 01       	movw	r22, r28
     1f0:	65 5c       	subi	r22, 0xC5	; 197
     1f2:	7f 4f       	sbci	r23, 0xFF	; 255
     1f4:	80 e5       	ldi	r24, 0x50	; 80
     1f6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <I2C_0_writeNBytes>
		if (i2c_error_status==I2C_NOERR)
     1fa:	81 11       	cpse	r24, r1
     1fc:	25 c0       	rjmp	.+74     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
		{
			i2c_error_status=I2C_0_readDataBlock_EEPROM(SLAVE_ADRESS, address_arr, 2 , data_array, 2) ;
     1fe:	02 e0       	ldi	r16, 0x02	; 2
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	9e 01       	movw	r18, r28
     204:	25 5c       	subi	r18, 0xC5	; 197
     206:	3f 4f       	sbci	r19, 0xFF	; 255
     208:	42 e0       	ldi	r20, 0x02	; 2
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	be 01       	movw	r22, r28
     20e:	60 5c       	subi	r22, 0xC0	; 192
     210:	7f 4f       	sbci	r23, 0xFF	; 255
     212:	80 e5       	ldi	r24, 0x50	; 80
     214:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_0_readDataBlock_EEPROM>
			if (i2c_error_status==I2C_NOERR)
     218:	81 11       	cpse	r24, r1
     21a:	19 c0       	rjmp	.+50     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				max_row=0;
				max_row=data_array[1];
     21c:	ac ac       	ldd	r10, Y+60	; 0x3c
     21e:	b1 2c       	mov	r11, r1
				max_row=(max_row<<8)|data_array[0];
     220:	ba 2c       	mov	r11, r10
     222:	aa 24       	eor	r10, r10
     224:	8b ad       	ldd	r24, Y+59	; 0x3b
     226:	a8 2a       	or	r10, r24
				if(max_row==0x00)
     228:	a1 14       	cp	r10, r1
     22a:	b1 04       	cpc	r11, r1
     22c:	91 f4       	brne	.+36     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
				printf("Clear max_row:%d\r\n",max_row);
     22e:	bf 92       	push	r11
     230:	af 92       	push	r10
     232:	84 e4       	ldi	r24, 0x44	; 68
     234:	90 e6       	ldi	r25, 0x60	; 96
     236:	9f 93       	push	r25
     238:	8f 93       	push	r24
     23a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <printf>
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	05 c0       	rjmp	.+10     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
		max_row=(max_row<<8)|data_array[0];
	}
	printf("read max_row:%d\r\n",max_row);
	if((max_row<0)||(max_row==0xffff))
	{
		max_row=0;
     248:	a1 2c       	mov	r10, r1
     24a:	b1 2c       	mov	r11, r1
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
     24e:	a1 2c       	mov	r10, r1
     250:	b1 2c       	mov	r11, r1
					counter_clear();
					printf("hello row_num: %d\r\n",row_num);
					//for (int i=0;i<50;i++)USART_0_write(led_row[i]);
					while(counter_get()<led_row[RX_DELAY])
					RGB_Set_color (led_row);
					row_num++;if (row_num>max_row)row_num=0;
     252:	e1 2c       	mov	r14, r1
     254:	f1 2c       	mov	r15, r1
     256:	0f c0       	rjmp	.+30     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
				if(max_row==0x00)
				printf("Clear max_row:%d\r\n",max_row);
			}
		}
	}
	else printf("max_row:%d\r\n",max_row);
     258:	bf 92       	push	r11
     25a:	af 92       	push	r10
     25c:	87 e3       	ldi	r24, 0x37	; 55
     25e:	90 e6       	ldi	r25, 0x60	; 96
     260:	9f 93       	push	r25
     262:	8f 93       	push	r24
     264:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <printf>
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	f0 cf       	rjmp	.-32     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
					counter_clear();
					printf("hello row_num: %d\r\n",row_num);
					//for (int i=0;i<50;i++)USART_0_write(led_row[i]);
					while(counter_get()<led_row[RX_DELAY])
					RGB_Set_color (led_row);
					row_num++;if (row_num>max_row)row_num=0;
     272:	e1 2c       	mov	r14, r1
     274:	f1 2c       	mov	r15, r1
	}
	else printf("max_row:%d\r\n",max_row);
	/* Replace with your application code */
	while (1)
	{
		if(device_number==0)
     276:	81 10       	cpse	r8, r1
     278:	15 c0       	rjmp	.+42     	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			if ((comm_get_RXbuffer(RX_CON_COMMAND)==0x05)||(comm_get_RXbuffer(RX_CON_COMMAND)==0x02))
     27a:	85 e3       	ldi	r24, 0x35	; 53
     27c:	0e 94 23 0a 	call	0x1446	; 0x1446 <comm_get_RXbuffer>
     280:	85 30       	cpi	r24, 0x05	; 5
     282:	29 f0       	breq	.+10     	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
     284:	85 e3       	ldi	r24, 0x35	; 53
     286:	0e 94 23 0a 	call	0x1446	; 0x1446 <comm_get_RXbuffer>
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	81 f4       	brne	.+32     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
			{
				mode=2;
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 a8 60 	sts	0x60A8, r24	; 0x8060a8 <__data_end>
				RGB_init();
     294:	0e 94 44 07 	call	0xe88	; 0xe88 <RGB_init>
				if (comm_get_RXbuffer(RX_CON_COMMAND)==0x05)
     298:	85 e3       	ldi	r24, 0x35	; 53
     29a:	0e 94 23 0a 	call	0x1446	; 0x1446 <comm_get_RXbuffer>
     29e:	85 30       	cpi	r24, 0x05	; 5
     2a0:	31 f4       	brne	.+12     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
					max_row=0;
			}	
		}
		else
		{
			mode=0;
     2a4:	10 92 a8 60 	sts	0x60A8, r1	; 0x8060a8 <__data_end>
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
			if ((comm_get_RXbuffer(RX_CON_COMMAND)==0x05)||(comm_get_RXbuffer(RX_CON_COMMAND)==0x02))
			{
				mode=2;
				RGB_init();
				if (comm_get_RXbuffer(RX_CON_COMMAND)==0x05)
					max_row=0;
     2aa:	a1 2c       	mov	r10, r1
     2ac:	b1 2c       	mov	r11, r1
		}
		else
		{
			mode=0;
		}
		switch (mode)
     2ae:	80 91 a8 60 	lds	r24, 0x60A8	; 0x8060a8 <__data_end>
     2b2:	88 23       	and	r24, r24
     2b4:	19 f0       	breq	.+6      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	e1 f1       	breq	.+120    	; 0x332 <__EEPROM_REGION_LENGTH__+0x132>
     2ba:	dd cf       	rjmp	.-70     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
		{
			case 0:
			{
				//normal operation mode
				address =((51*row_num));
     2bc:	23 e3       	ldi	r18, 0x33	; 51
     2be:	2e 9d       	mul	r18, r14
     2c0:	c0 01       	movw	r24, r0
     2c2:	2f 9d       	mul	r18, r15
     2c4:	90 0d       	add	r25, r0
     2c6:	11 24       	eor	r1, r1
				// low address first element in array
				address_arr[0]=(uint8_t)(address&0xFF);
     2c8:	21 96       	adiw	r28, 0x01	; 1
     2ca:	8f af       	std	Y+63, r24	; 0x3f
     2cc:	21 97       	sbiw	r28, 0x01	; 1
				address_arr[1]=(uint8_t)((address>>8)&0xFF);
     2ce:	22 96       	adiw	r28, 0x02	; 2
     2d0:	9f af       	std	Y+63, r25	; 0x3f
     2d2:	22 97       	sbiw	r28, 0x02	; 2
				i2c_error_t i2c_error_status=I2C_0_readDataBlock_EEPROM(SLAVE_ADRESS,address_arr,2,led_row,51);
     2d4:	03 e3       	ldi	r16, 0x33	; 51
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	9e 01       	movw	r18, r28
     2da:	2f 5f       	subi	r18, 0xFF	; 255
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	42 e0       	ldi	r20, 0x02	; 2
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	be 01       	movw	r22, r28
     2e4:	60 5c       	subi	r22, 0xC0	; 192
     2e6:	7f 4f       	sbci	r23, 0xFF	; 255
     2e8:	80 e5       	ldi	r24, 0x50	; 80
     2ea:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_0_readDataBlock_EEPROM>
				if (i2c_error_status==I2C_NOERR)
     2ee:	81 11       	cpse	r24, r1
     2f0:	c2 cf       	rjmp	.-124    	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
				{
					counter_clear();
     2f2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <counter_clear>
					printf("hello row_num: %d\r\n",row_num);
     2f6:	ff 92       	push	r15
     2f8:	ef 92       	push	r14
     2fa:	87 e5       	ldi	r24, 0x57	; 87
     2fc:	90 e6       	ldi	r25, 0x60	; 96
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <printf>
					//for (int i=0;i<50;i++)USART_0_write(led_row[i]);
					while(counter_get()<led_row[RX_DELAY])
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	04 c0       	rjmp	.+8      	; 0x318 <__EEPROM_REGION_LENGTH__+0x118>
					RGB_Set_color (led_row);
     310:	ce 01       	movw	r24, r28
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	0e 94 35 08 	call	0x106a	; 0x106a <RGB_Set_color>
				if (i2c_error_status==I2C_NOERR)
				{
					counter_clear();
					printf("hello row_num: %d\r\n",row_num);
					//for (int i=0;i<50;i++)USART_0_write(led_row[i]);
					while(counter_get()<led_row[RX_DELAY])
     318:	0e 94 d6 09 	call	0x13ac	; 0x13ac <counter_get>
     31c:	9b a9       	ldd	r25, Y+51	; 0x33
     31e:	89 17       	cp	r24, r25
     320:	b8 f3       	brcs	.-18     	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
					RGB_Set_color (led_row);
					row_num++;if (row_num>max_row)row_num=0;
     322:	2f ef       	ldi	r18, 0xFF	; 255
     324:	e2 1a       	sub	r14, r18
     326:	f2 0a       	sbc	r15, r18
     328:	ae 14       	cp	r10, r14
     32a:	bf 04       	cpc	r11, r15
     32c:	08 f4       	brcc	.+2      	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
     32e:	a1 cf       	rjmp	.-190    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
     330:	a2 cf       	rjmp	.-188    	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
				//test EEPROM 
				break;
			}
			case 2:
			{				
				 if(new_fram_status_flag_get())  //check for new row fram
     332:	0e 94 29 0a 	call	0x1452	; 0x1452 <new_fram_status_flag_get>
     336:	88 23       	and	r24, r24
     338:	09 f4       	brne	.+2      	; 0x33c <__EEPROM_REGION_LENGTH__+0x13c>
     33a:	9d cf       	rjmp	.-198    	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
				 {
					 //write row fram to EEPROM
					 //printf("new_fram_status_flag_get\r\n");
					 row_num=comm_get_RXbuffer(RX_ROW_HIGH);
     33c:	83 e3       	ldi	r24, 0x33	; 51
     33e:	0e 94 23 0a 	call	0x1446	; 0x1446 <comm_get_RXbuffer>
     342:	e8 2e       	mov	r14, r24
     344:	f1 2c       	mov	r15, r1
					 row_num=(row_num<<8)|comm_get_RXbuffer(RX_ROW_LOW);
     346:	fe 2c       	mov	r15, r14
     348:	ee 24       	eor	r14, r14
     34a:	84 e3       	ldi	r24, 0x34	; 52
     34c:	0e 94 23 0a 	call	0x1446	; 0x1446 <comm_get_RXbuffer>
     350:	e8 2a       	or	r14, r24
					 address =((51*row_num));
     352:	83 e3       	ldi	r24, 0x33	; 51
     354:	8e 9d       	mul	r24, r14
     356:	60 01       	movw	r12, r0
     358:	8f 9d       	mul	r24, r15
     35a:	d0 0c       	add	r13, r0
     35c:	11 24       	eor	r1, r1
					 // low address first element in array
					 led_row[0]=(uint8_t)(address&0xFF);
     35e:	c9 82       	std	Y+1, r12	; 0x01
					 led_row[1]=(uint8_t)((address>>8)&0xFF);
     360:	da 82       	std	Y+2, r13	; 0x02
					 for (uint8_t i=0;i<RX_ROW_HIGH;i++)led_row[i+2]=comm_get_RXbuffer(i);
     362:	91 2c       	mov	r9, r1
     364:	0f c0       	rjmp	.+30     	; 0x384 <__EEPROM_REGION_LENGTH__+0x184>
     366:	09 2d       	mov	r16, r9
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	0e 5f       	subi	r16, 0xFE	; 254
     36c:	1f 4f       	sbci	r17, 0xFF	; 255
     36e:	89 2d       	mov	r24, r9
     370:	0e 94 23 0a 	call	0x1446	; 0x1446 <comm_get_RXbuffer>
     374:	e1 e0       	ldi	r30, 0x01	; 1
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	ec 0f       	add	r30, r28
     37a:	fd 1f       	adc	r31, r29
     37c:	e0 0f       	add	r30, r16
     37e:	f1 1f       	adc	r31, r17
     380:	80 83       	st	Z, r24
     382:	93 94       	inc	r9
     384:	82 e3       	ldi	r24, 0x32	; 50
     386:	89 15       	cp	r24, r9
     388:	70 f7       	brcc	.-36     	; 0x366 <__EEPROM_REGION_LENGTH__+0x166>
				     i2c_error_t i2c_error_status=I2C_0_writeNBytes(SLAVE_ADRESS,led_row,53);
     38a:	45 e3       	ldi	r20, 0x35	; 53
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	be 01       	movw	r22, r28
     390:	6f 5f       	subi	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	80 e5       	ldi	r24, 0x50	; 80
     396:	0e 94 b5 06 	call	0xd6a	; 0xd6a <I2C_0_writeNBytes>
					 if (i2c_error_status==I2C_NOERR)	//check if data written to EEPROM
     39a:	81 11       	cpse	r24, r1
     39c:	6c cf       	rjmp	.-296    	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
					 {
						//for (int i=0;i<53;i++)USART_0_write(led_row[i]);
						 if(row_num>max_row)
     39e:	ae 14       	cp	r10, r14
     3a0:	bf 04       	cpc	r11, r15
     3a2:	f0 f4       	brcc	.+60     	; 0x3e0 <__EEPROM_REGION_LENGTH__+0x1e0>
						 {
							max_row=row_num;
							data_array[0]=(MAX_LOW_ADDRESS);data_array[1]=(MAX_HIGH_ADDRESS);
     3a4:	80 ef       	ldi	r24, 0xF0	; 240
     3a6:	8b af       	std	Y+59, r24	; 0x3b
     3a8:	8c af       	std	Y+60, r24	; 0x3c
							data_array[2]=(uint8_t)(max_row&0xFF);data_array[3]=(uint8_t)((max_row>>8)&0xFF);
     3aa:	ed ae       	std	Y+61, r14	; 0x3d
     3ac:	fe ae       	std	Y+62, r15	; 0x3e
							i2c_error_status=I2C_0_writeNBytes(SLAVE_ADRESS,data_array,4);
     3ae:	44 e0       	ldi	r20, 0x04	; 4
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	be 01       	movw	r22, r28
     3b4:	65 5c       	subi	r22, 0xC5	; 197
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	80 e5       	ldi	r24, 0x50	; 80
     3ba:	0e 94 b5 06 	call	0xd6a	; 0xd6a <I2C_0_writeNBytes>
							if (i2c_error_status==I2C_NOERR)printf("update max_row:%d\r\n",max_row); 
     3be:	81 11       	cpse	r24, r1
     3c0:	0e c0       	rjmp	.+28     	; 0x3de <__EEPROM_REGION_LENGTH__+0x1de>
     3c2:	ff 92       	push	r15
     3c4:	ef 92       	push	r14
     3c6:	8b e6       	ldi	r24, 0x6B	; 107
     3c8:	90 e6       	ldi	r25, 0x60	; 96
     3ca:	9f 93       	push	r25
     3cc:	8f 93       	push	r24
     3ce:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <printf>
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
					 if (i2c_error_status==I2C_NOERR)	//check if data written to EEPROM
					 {
						//for (int i=0;i<53;i++)USART_0_write(led_row[i]);
						 if(row_num>max_row)
						 {
							max_row=row_num;
     3da:	57 01       	movw	r10, r14
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <__EEPROM_REGION_LENGTH__+0x1e0>
     3de:	57 01       	movw	r10, r14
							data_array[0]=(MAX_LOW_ADDRESS);data_array[1]=(MAX_HIGH_ADDRESS);
							data_array[2]=(uint8_t)(max_row&0xFF);data_array[3]=(uint8_t)((max_row>>8)&0xFF);
							i2c_error_status=I2C_0_writeNBytes(SLAVE_ADRESS,data_array,4);
							if (i2c_error_status==I2C_NOERR)printf("update max_row:%d\r\n",max_row); 
						 }
						printf("new_fram_status_flag_clear address:%d\r\n",address);
     3e0:	df 92       	push	r13
     3e2:	cf 92       	push	r12
     3e4:	8f e7       	ldi	r24, 0x7F	; 127
     3e6:	90 e6       	ldi	r25, 0x60	; 96
     3e8:	9f 93       	push	r25
     3ea:	8f 93       	push	r24
     3ec:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <printf>
						 {
							//normal operation mode
							address =((51*row_num));
							// low address first element in array
							address_arr[0]=(uint8_t)(address&0xFF);
     3f0:	21 96       	adiw	r28, 0x01	; 1
     3f2:	cf ae       	std	Y+63, r12	; 0x3f
     3f4:	21 97       	sbiw	r28, 0x01	; 1
							address_arr[1]=(uint8_t)((address>>8)&0xFF);
     3f6:	22 96       	adiw	r28, 0x02	; 2
     3f8:	df ae       	std	Y+63, r13	; 0x3f
     3fa:	22 97       	sbiw	r28, 0x02	; 2
							i2c_error_t i2c_error_status=I2C_0_readDataBlock_EEPROM(SLAVE_ADRESS,address_arr,2,led_row,51);
     3fc:	03 e3       	ldi	r16, 0x33	; 51
     3fe:	10 e0       	ldi	r17, 0x00	; 0
     400:	9e 01       	movw	r18, r28
     402:	2f 5f       	subi	r18, 0xFF	; 255
     404:	3f 4f       	sbci	r19, 0xFF	; 255
     406:	42 e0       	ldi	r20, 0x02	; 2
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	be 01       	movw	r22, r28
     40c:	60 5c       	subi	r22, 0xC0	; 192
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	80 e5       	ldi	r24, 0x50	; 80
     412:	0e 94 ed 06 	call	0xdda	; 0xdda <I2C_0_readDataBlock_EEPROM>
							if (i2c_error_status==I2C_NOERR)
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	81 11       	cpse	r24, r1
     420:	08 c0       	rjmp	.+16     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
							{
								//for (int i=0;i<51;i++)USART_0_write(led_row[i]);
								new_fram_status_flag_clear();
     422:	0e 94 2c 0a 	call	0x1458	; 0x1458 <new_fram_status_flag_clear>
								comm_set_data(row_num);
     426:	c7 01       	movw	r24, r14
     428:	0e 94 42 0a 	call	0x1484	; 0x1484 <comm_set_data>
								USART_1_write(0);
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <USART_1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     432:	9f e3       	ldi	r25, 0x3F	; 63
     434:	ad e0       	ldi	r26, 0x0D	; 13
     436:	b3 e0       	ldi	r27, 0x03	; 3
     438:	91 50       	subi	r25, 0x01	; 1
     43a:	a0 40       	sbci	r26, 0x00	; 0
     43c:	b0 40       	sbci	r27, 0x00	; 0
     43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     442:	00 00       	nop
     444:	18 cf       	rjmp	.-464    	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>

00000446 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     446:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f00a9>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret

0000044e <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     44e:	40 e2       	ldi	r20, 0x20	; 32
     450:	68 ed       	ldi	r22, 0xD8	; 216
     452:	88 e6       	ldi	r24, 0x68	; 104
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 3f 07 	call	0xe7e	; 0xe7e <protected_write_io>

	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	return 0;
}
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 95       	ret

0000045e <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	08 95       	ret

00000462 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	08 c0       	rjmp	.+16     	; 0x476 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     466:	e8 2f       	mov	r30, r24
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	e0 5f       	subi	r30, 0xF0	; 240
     46c:	fb 4f       	sbci	r31, 0xFB	; 251
     46e:	90 81       	ld	r25, Z
     470:	98 60       	ori	r25, 0x08	; 8
     472:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     474:	8f 5f       	subi	r24, 0xFF	; 255
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	b0 f3       	brcs	.-20     	; 0x466 <mcu_init+0x4>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	08 c0       	rjmp	.+16     	; 0x48e <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     47e:	e8 2f       	mov	r30, r24
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	e0 5d       	subi	r30, 0xD0	; 208
     484:	fb 4f       	sbci	r31, 0xFB	; 251
     486:	90 81       	ld	r25, Z
     488:	98 60       	ori	r25, 0x08	; 8
     48a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     48c:	8f 5f       	subi	r24, 0xFF	; 255
     48e:	88 30       	cpi	r24, 0x08	; 8
     490:	b0 f3       	brcs	.-20     	; 0x47e <mcu_init+0x1c>
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 c0       	rjmp	.+16     	; 0x4a6 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     496:	e8 2f       	mov	r30, r24
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	e0 5b       	subi	r30, 0xB0	; 176
     49c:	fb 4f       	sbci	r31, 0xFB	; 251
     49e:	90 81       	ld	r25, Z
     4a0:	98 60       	ori	r25, 0x08	; 8
     4a2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	88 30       	cpi	r24, 0x08	; 8
     4a8:	b0 f3       	brcs	.-20     	; 0x496 <mcu_init+0x34>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	08 c0       	rjmp	.+16     	; 0x4be <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4ae:	e8 2f       	mov	r30, r24
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	e0 59       	subi	r30, 0x90	; 144
     4b4:	fb 4f       	sbci	r31, 0xFB	; 251
     4b6:	90 81       	ld	r25, Z
     4b8:	98 60       	ori	r25, 0x08	; 8
     4ba:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	b0 f3       	brcs	.-20     	; 0x4ae <mcu_init+0x4c>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4c6:	e8 2f       	mov	r30, r24
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	e0 57       	subi	r30, 0x70	; 112
     4cc:	fb 4f       	sbci	r31, 0xFB	; 251
     4ce:	90 81       	ld	r25, Z
     4d0:	98 60       	ori	r25, 0x08	; 8
     4d2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
     4d6:	88 30       	cpi	r24, 0x08	; 8
     4d8:	b0 f3       	brcs	.-20     	; 0x4c6 <mcu_init+0x64>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 c0       	rjmp	.+16     	; 0x4ee <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4de:	e8 2f       	mov	r30, r24
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	e0 55       	subi	r30, 0x50	; 80
     4e4:	fb 4f       	sbci	r31, 0xFB	; 251
     4e6:	90 81       	ld	r25, Z
     4e8:	98 60       	ori	r25, 0x08	; 8
     4ea:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4ec:	8f 5f       	subi	r24, 0xFF	; 255
     4ee:	88 30       	cpi	r24, 0x08	; 8
     4f0:	b0 f3       	brcs	.-20     	; 0x4de <mcu_init+0x7c>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	08 c0       	rjmp	.+16     	; 0x506 <mcu_init+0xa4>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4f6:	e8 2f       	mov	r30, r24
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	e0 53       	subi	r30, 0x30	; 48
     4fc:	fb 4f       	sbci	r31, 0xFB	; 251
     4fe:	90 81       	ld	r25, Z
     500:	98 60       	ori	r25, 0x08	; 8
     502:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     504:	8f 5f       	subi	r24, 0xFF	; 255
     506:	88 30       	cpi	r24, 0x08	; 8
     508:	b0 f3       	brcs	.-20     	; 0x4f6 <mcu_init+0x94>
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     50a:	08 95       	ret

0000050c <USART_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     50c:	80 b1       	in	r24, 0x00	; 0
     50e:	8f 7d       	andi	r24, 0xDF	; 223
     510:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     512:	e5 e1       	ldi	r30, 0x15	; 21
     514:	f4 e0       	ldi	r31, 0x04	; 4
     516:	80 81       	ld	r24, Z
     518:	87 7f       	andi	r24, 0xF7	; 247
     51a:	80 83       	st	Z, r24
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	/* set the alternate pin mux */

	PORTMUX.USARTROUTEA |= PORTMUX_USART00_bm;
     51c:	e0 ee       	ldi	r30, 0xE0	; 224
     51e:	f5 e0       	ldi	r31, 0x05	; 5
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	81 60       	ori	r24, 0x01	; 1
     524:	82 83       	std	Z+2, r24	; 0x02
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     526:	81 b1       	in	r24, 0x01	; 1
     528:	8f 7e       	andi	r24, 0xEF	; 239
     52a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     52c:	80 b1       	in	r24, 0x00	; 0
     52e:	80 61       	ori	r24, 0x10	; 16
     530:	80 b9       	out	0x00, r24	; 0

	PA4_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.USARTROUTEA |= PORTMUX_USART00_bm;
     532:	82 81       	ldd	r24, Z+2	; 0x02
     534:	81 60       	ori	r24, 0x01	; 1
     536:	82 83       	std	Z+2, r24	; 0x02

	USART_0_init();
     538:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <USART_0_init>
     53c:	08 95       	ret

0000053e <USART_1_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     53e:	84 b1       	in	r24, 0x04	; 4
     540:	8d 7f       	andi	r24, 0xFD	; 253
     542:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     544:	e1 e3       	ldi	r30, 0x31	; 49
     546:	f4 e0       	ldi	r31, 0x04	; 4
     548:	80 81       	ld	r24, Z
     54a:	87 7f       	andi	r24, 0xF7	; 247
     54c:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     54e:	85 b1       	in	r24, 0x05	; 5
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     554:	84 b1       	in	r24, 0x04	; 4
     556:	81 60       	ori	r24, 0x01	; 1
     558:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB0_set_dir(PORT_DIR_OUT);

	USART_1_init();
     55a:	0e 94 2f 0a 	call	0x145e	; 0x145e <USART_1_init>
     55e:	08 95       	ret

00000560 <I2C_0_initialization>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     560:	85 b1       	in	r24, 0x05	; 5
     562:	87 7f       	andi	r24, 0xF7	; 247
     564:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     566:	84 b1       	in	r24, 0x04	; 4
     568:	88 60       	ori	r24, 0x08	; 8
     56a:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     56c:	e3 e3       	ldi	r30, 0x33	; 51
     56e:	f4 e0       	ldi	r31, 0x04	; 4
     570:	80 81       	ld	r24, Z
     572:	87 7f       	andi	r24, 0xF7	; 247
     574:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     576:	80 81       	ld	r24, Z
     578:	8f 77       	andi	r24, 0x7F	; 127
     57a:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     57c:	80 81       	ld	r24, Z
     57e:	88 7f       	andi	r24, 0xF8	; 248
     580:	80 83       	st	Z, r24
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	/* set the alternate pin mux */

	PORTMUX.TWIROUTEA |= PORTMUX_TWI11_bm;
     582:	a0 ee       	ldi	r26, 0xE0	; 224
     584:	b5 e0       	ldi	r27, 0x05	; 5
     586:	15 96       	adiw	r26, 0x05	; 5
     588:	8c 91       	ld	r24, X
     58a:	15 97       	sbiw	r26, 0x05	; 5
     58c:	88 60       	ori	r24, 0x08	; 8
     58e:	15 96       	adiw	r26, 0x05	; 5
     590:	8c 93       	st	X, r24
     592:	15 97       	sbiw	r26, 0x05	; 5
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     594:	85 b1       	in	r24, 0x05	; 5
     596:	8b 7f       	andi	r24, 0xFB	; 251
     598:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     59a:	84 b1       	in	r24, 0x04	; 4
     59c:	84 60       	ori	r24, 0x04	; 4
     59e:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     5a0:	e2 e3       	ldi	r30, 0x32	; 50
     5a2:	f4 e0       	ldi	r31, 0x04	; 4
     5a4:	80 81       	ld	r24, Z
     5a6:	87 7f       	andi	r24, 0xF7	; 247
     5a8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     5aa:	80 81       	ld	r24, Z
     5ac:	8f 77       	andi	r24, 0x7F	; 127
     5ae:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     5b0:	80 81       	ld	r24, Z
     5b2:	88 7f       	andi	r24, 0xF8	; 248
     5b4:	80 83       	st	Z, r24
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	/* set the alternate pin mux */

	PORTMUX.TWIROUTEA |= PORTMUX_TWI11_bm;
     5b6:	15 96       	adiw	r26, 0x05	; 5
     5b8:	8c 91       	ld	r24, X
     5ba:	15 97       	sbiw	r26, 0x05	; 5
     5bc:	88 60       	ori	r24, 0x08	; 8
     5be:	15 96       	adiw	r26, 0x05	; 5
     5c0:	8c 93       	st	X, r24

	I2C_0_init();
     5c2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <I2C_0_init>
     5c6:	08 95       	ret

000005c8 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     5c8:	0e 94 c9 09 	call	0x1392	; 0x1392 <TIMER_0_init>
     5cc:	08 95       	ret

000005ce <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     5ce:	0e 94 31 02 	call	0x462	; 0x462 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     5d2:	80 b1       	in	r24, 0x00	; 0
     5d4:	8e 7f       	andi	r24, 0xFE	; 254
     5d6:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     5d8:	e0 e1       	ldi	r30, 0x10	; 16
     5da:	f4 e0       	ldi	r31, 0x04	; 4
     5dc:	80 81       	ld	r24, Z
     5de:	88 60       	ori	r24, 0x08	; 8
     5e0:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     5e2:	80 b1       	in	r24, 0x00	; 0
     5e4:	8d 7f       	andi	r24, 0xFD	; 253
     5e6:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     5e8:	e1 e1       	ldi	r30, 0x11	; 17
     5ea:	f4 e0       	ldi	r31, 0x04	; 4
     5ec:	80 81       	ld	r24, Z
     5ee:	88 60       	ori	r24, 0x08	; 8
     5f0:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     5f2:	80 b1       	in	r24, 0x00	; 0
     5f4:	8b 7f       	andi	r24, 0xFB	; 251
     5f6:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     5f8:	e2 e1       	ldi	r30, 0x12	; 18
     5fa:	f4 e0       	ldi	r31, 0x04	; 4
     5fc:	80 81       	ld	r24, Z
     5fe:	88 60       	ori	r24, 0x08	; 8
     600:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     602:	80 b1       	in	r24, 0x00	; 0
     604:	87 7f       	andi	r24, 0xF7	; 247
     606:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     608:	e3 e1       	ldi	r30, 0x13	; 19
     60a:	f4 e0       	ldi	r31, 0x04	; 4
     60c:	80 81       	ld	r24, Z
     60e:	88 60       	ori	r24, 0x08	; 8
     610:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     612:	81 b1       	in	r24, 0x01	; 1
     614:	8f 7b       	andi	r24, 0xBF	; 191
     616:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     618:	80 b1       	in	r24, 0x00	; 0
     61a:	80 64       	ori	r24, 0x40	; 64
     61c:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     61e:	81 b1       	in	r24, 0x01	; 1
     620:	8f 77       	andi	r24, 0x7F	; 127
     622:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     624:	80 b1       	in	r24, 0x00	; 0
     626:	80 68       	ori	r24, 0x80	; 128
     628:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     62a:	85 b1       	in	r24, 0x05	; 5
     62c:	8f 7e       	andi	r24, 0xEF	; 239
     62e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     630:	84 b1       	in	r24, 0x04	; 4
     632:	80 61       	ori	r24, 0x10	; 16
     634:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     636:	85 b1       	in	r24, 0x05	; 5
     638:	8f 7d       	andi	r24, 0xDF	; 223
     63a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     63c:	84 b1       	in	r24, 0x04	; 4
     63e:	80 62       	ori	r24, 0x20	; 32
     640:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     642:	85 b1       	in	r24, 0x05	; 5
     644:	8f 7b       	andi	r24, 0xBF	; 191
     646:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     648:	84 b1       	in	r24, 0x04	; 4
     64a:	80 64       	ori	r24, 0x40	; 64
     64c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     64e:	85 b1       	in	r24, 0x05	; 5
     650:	8f 77       	andi	r24, 0x7F	; 127
     652:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     654:	84 b1       	in	r24, 0x04	; 4
     656:	80 68       	ori	r24, 0x80	; 128
     658:	84 b9       	out	0x04, r24	; 4
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     65a:	89 b1       	in	r24, 0x09	; 9
     65c:	8e 7f       	andi	r24, 0xFE	; 254
     65e:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     660:	88 b1       	in	r24, 0x08	; 8
     662:	81 60       	ori	r24, 0x01	; 1
     664:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     666:	89 b1       	in	r24, 0x09	; 9
     668:	8d 7f       	andi	r24, 0xFD	; 253
     66a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     66c:	88 b1       	in	r24, 0x08	; 8
     66e:	82 60       	ori	r24, 0x02	; 2
     670:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     672:	89 b1       	in	r24, 0x09	; 9
     674:	8b 7f       	andi	r24, 0xFB	; 251
     676:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     678:	88 b1       	in	r24, 0x08	; 8
     67a:	84 60       	ori	r24, 0x04	; 4
     67c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     67e:	89 b1       	in	r24, 0x09	; 9
     680:	87 7f       	andi	r24, 0xF7	; 247
     682:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     684:	88 b1       	in	r24, 0x08	; 8
     686:	88 60       	ori	r24, 0x08	; 8
     688:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     68a:	89 b1       	in	r24, 0x09	; 9
     68c:	8f 7e       	andi	r24, 0xEF	; 239
     68e:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     690:	88 b1       	in	r24, 0x08	; 8
     692:	80 61       	ori	r24, 0x10	; 16
     694:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     696:	89 b1       	in	r24, 0x09	; 9
     698:	8f 7d       	andi	r24, 0xDF	; 223
     69a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     69c:	88 b1       	in	r24, 0x08	; 8
     69e:	80 62       	ori	r24, 0x20	; 32
     6a0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     6a2:	89 b1       	in	r24, 0x09	; 9
     6a4:	8f 7b       	andi	r24, 0xBF	; 191
     6a6:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     6a8:	88 b1       	in	r24, 0x08	; 8
     6aa:	80 64       	ori	r24, 0x40	; 64
     6ac:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     6ae:	89 b1       	in	r24, 0x09	; 9
     6b0:	8f 77       	andi	r24, 0x7F	; 127
     6b2:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     6b4:	88 b1       	in	r24, 0x08	; 8
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	88 b9       	out	0x08, r24	; 8
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6ba:	8d b1       	in	r24, 0x0d	; 13
     6bc:	8e 7f       	andi	r24, 0xFE	; 254
     6be:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     6c0:	8c b1       	in	r24, 0x0c	; 12
     6c2:	81 60       	ori	r24, 0x01	; 1
     6c4:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6c6:	8d b1       	in	r24, 0x0d	; 13
     6c8:	8d 7f       	andi	r24, 0xFD	; 253
     6ca:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     6cc:	8c b1       	in	r24, 0x0c	; 12
     6ce:	82 60       	ori	r24, 0x02	; 2
     6d0:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6d2:	8d b1       	in	r24, 0x0d	; 13
     6d4:	87 7f       	andi	r24, 0xF7	; 247
     6d6:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     6d8:	8c b1       	in	r24, 0x0c	; 12
     6da:	88 60       	ori	r24, 0x08	; 8
     6dc:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6de:	8d b1       	in	r24, 0x0d	; 13
     6e0:	8f 7e       	andi	r24, 0xEF	; 239
     6e2:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     6e4:	8c b1       	in	r24, 0x0c	; 12
     6e6:	80 61       	ori	r24, 0x10	; 16
     6e8:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6ea:	8d b1       	in	r24, 0x0d	; 13
     6ec:	8f 7d       	andi	r24, 0xDF	; 223
     6ee:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     6f0:	8c b1       	in	r24, 0x0c	; 12
     6f2:	80 62       	ori	r24, 0x20	; 32
     6f4:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6f6:	8d b1       	in	r24, 0x0d	; 13
     6f8:	8f 7b       	andi	r24, 0xBF	; 191
     6fa:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     6fc:	8c b1       	in	r24, 0x0c	; 12
     6fe:	80 64       	ori	r24, 0x40	; 64
     700:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     702:	8d b1       	in	r24, 0x0d	; 13
     704:	8f 77       	andi	r24, 0x7F	; 127
     706:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     708:	8c b1       	in	r24, 0x0c	; 12
     70a:	80 68       	ori	r24, 0x80	; 128
     70c:	8c b9       	out	0x0c, r24	; 12
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     70e:	81 b3       	in	r24, 0x11	; 17
     710:	8e 7f       	andi	r24, 0xFE	; 254
     712:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     714:	80 b3       	in	r24, 0x10	; 16
     716:	81 60       	ori	r24, 0x01	; 1
     718:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     71a:	81 b3       	in	r24, 0x11	; 17
     71c:	8d 7f       	andi	r24, 0xFD	; 253
     71e:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     720:	80 b3       	in	r24, 0x10	; 16
     722:	82 60       	ori	r24, 0x02	; 2
     724:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     726:	81 b3       	in	r24, 0x11	; 17
     728:	8b 7f       	andi	r24, 0xFB	; 251
     72a:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     72c:	80 b3       	in	r24, 0x10	; 16
     72e:	84 60       	ori	r24, 0x04	; 4
     730:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     732:	81 b3       	in	r24, 0x11	; 17
     734:	87 7f       	andi	r24, 0xF7	; 247
     736:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     738:	80 b3       	in	r24, 0x10	; 16
     73a:	88 60       	ori	r24, 0x08	; 8
     73c:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     73e:	81 b3       	in	r24, 0x11	; 17
     740:	8f 7e       	andi	r24, 0xEF	; 239
     742:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     744:	80 b3       	in	r24, 0x10	; 16
     746:	80 61       	ori	r24, 0x10	; 16
     748:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     74a:	81 b3       	in	r24, 0x11	; 17
     74c:	8f 7d       	andi	r24, 0xDF	; 223
     74e:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     750:	80 b3       	in	r24, 0x10	; 16
     752:	80 62       	ori	r24, 0x20	; 32
     754:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     756:	81 b3       	in	r24, 0x11	; 17
     758:	8f 7b       	andi	r24, 0xBF	; 191
     75a:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     75c:	80 b3       	in	r24, 0x10	; 16
     75e:	80 64       	ori	r24, 0x40	; 64
     760:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
     762:	81 b3       	in	r24, 0x11	; 17
     764:	8f 77       	andi	r24, 0x7F	; 127
     766:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     768:	80 b3       	in	r24, 0x10	; 16
     76a:	80 68       	ori	r24, 0x80	; 128
     76c:	80 bb       	out	0x10, r24	; 16
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     76e:	85 b3       	in	r24, 0x15	; 21
     770:	8e 7f       	andi	r24, 0xFE	; 254
     772:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     774:	84 b3       	in	r24, 0x14	; 20
     776:	81 60       	ori	r24, 0x01	; 1
     778:	84 bb       	out	0x14, r24	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     77a:	85 b3       	in	r24, 0x15	; 21
     77c:	8d 7f       	andi	r24, 0xFD	; 253
     77e:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     780:	84 b3       	in	r24, 0x14	; 20
     782:	82 60       	ori	r24, 0x02	; 2
     784:	84 bb       	out	0x14, r24	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     786:	85 b3       	in	r24, 0x15	; 21
     788:	8b 7f       	andi	r24, 0xFB	; 251
     78a:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     78c:	84 b3       	in	r24, 0x14	; 20
     78e:	84 60       	ori	r24, 0x04	; 4
     790:	84 bb       	out	0x14, r24	; 20
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     792:	89 b3       	in	r24, 0x19	; 25
     794:	8e 7f       	andi	r24, 0xFE	; 254
     796:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     798:	88 b3       	in	r24, 0x18	; 24
     79a:	81 60       	ori	r24, 0x01	; 1
     79c:	88 bb       	out	0x18, r24	; 24
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     79e:	89 b3       	in	r24, 0x19	; 25
     7a0:	8d 7f       	andi	r24, 0xFD	; 253
     7a2:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     7a4:	88 b3       	in	r24, 0x18	; 24
     7a6:	82 60       	ori	r24, 0x02	; 2
     7a8:	88 bb       	out	0x18, r24	; 24
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     7aa:	89 b3       	in	r24, 0x19	; 25
     7ac:	8b 7f       	andi	r24, 0xFB	; 251
     7ae:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     7b0:	88 b3       	in	r24, 0x18	; 24
     7b2:	84 60       	ori	r24, 0x04	; 4
     7b4:	88 bb       	out	0x18, r24	; 24
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     7b6:	89 b3       	in	r24, 0x19	; 25
     7b8:	87 7f       	andi	r24, 0xF7	; 247
     7ba:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     7bc:	88 b3       	in	r24, 0x18	; 24
     7be:	88 60       	ori	r24, 0x08	; 8
     7c0:	88 bb       	out	0x18, r24	; 24
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     7c2:	89 b3       	in	r24, 0x19	; 25
     7c4:	8f 7e       	andi	r24, 0xEF	; 239
     7c6:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     7c8:	88 b3       	in	r24, 0x18	; 24
     7ca:	80 61       	ori	r24, 0x10	; 16
     7cc:	88 bb       	out	0x18, r24	; 24
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     7ce:	89 b3       	in	r24, 0x19	; 25
     7d0:	8f 7d       	andi	r24, 0xDF	; 223
     7d2:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     7d4:	88 b3       	in	r24, 0x18	; 24
     7d6:	80 62       	ori	r24, 0x20	; 32
     7d8:	88 bb       	out	0x18, r24	; 24
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     7da:	89 b3       	in	r24, 0x19	; 25
     7dc:	8f 7b       	andi	r24, 0xBF	; 191
     7de:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     7e0:	88 b3       	in	r24, 0x18	; 24
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	88 bb       	out	0x18, r24	; 24
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
	} else {
		VPORTG.OUT &= ~(1 << pin);
     7e6:	89 b3       	in	r24, 0x19	; 25
     7e8:	8f 77       	andi	r24, 0x7F	; 127
     7ea:	89 bb       	out	0x19, r24	; 25
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     7ec:	88 b3       	in	r24, 0x18	; 24
     7ee:	80 68       	ori	r24, 0x80	; 128
     7f0:	88 bb       	out	0x18, r24	; 24
	    // <true"> High
	    false);

	R10_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     7f2:	0e 94 27 02 	call	0x44e	; 0x44e <CLKCTRL_init>

	USART_0_initialization();
     7f6:	0e 94 86 02 	call	0x50c	; 0x50c <USART_0_initialization>

	USART_1_initialization();
     7fa:	0e 94 9f 02 	call	0x53e	; 0x53e <USART_1_initialization>

	SLPCTRL_init();
     7fe:	0e 94 c7 09 	call	0x138e	; 0x138e <SLPCTRL_init>

	CPUINT_init();
     802:	0e 94 2f 02 	call	0x45e	; 0x45e <CPUINT_init>

	I2C_0_initialization();
     806:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_0_initialization>

	TIMER_0_initialization();
     80a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TIMER_0_initialization>

	BOD_init();
     80e:	0e 94 23 02 	call	0x446	; 0x446 <BOD_init>
     812:	08 95       	ret

00000814 <I2C_0_do_I2C_RESET>:
 * \brief Identical to I2C_0_master_operation(true);
 */
i2c_error_t I2C_0_master_read(void)
{
	return I2C_0_master_operation(true);
}
     814:	e0 e2       	ldi	r30, 0x20	; 32
     816:	f9 e0       	ldi	r31, 0x09	; 9
     818:	84 81       	ldd	r24, Z+4	; 0x04
     81a:	88 60       	ori	r24, 0x08	; 8
     81c:	84 83       	std	Z+4, r24	; 0x04
     81e:	85 81       	ldd	r24, Z+5	; 0x05
     820:	81 60       	ori	r24, 0x01	; 1
     822:	85 83       	std	Z+5, r24	; 0x05
     824:	e9 ea       	ldi	r30, 0xA9	; 169
     826:	f0 e6       	ldi	r31, 0x60	; 96
     828:	80 81       	ld	r24, Z
     82a:	8e 7f       	andi	r24, 0xFE	; 254
     82c:	80 83       	st	Z, r24
     82e:	13 86       	std	Z+11, r1	; 0x0b
     830:	8e e0       	ldi	r24, 0x0E	; 14
     832:	08 95       	ret

00000834 <I2C_0_do_I2C_IDLE>:
     834:	e9 ea       	ldi	r30, 0xA9	; 169
     836:	f0 e6       	ldi	r31, 0x60	; 96
     838:	80 81       	ld	r24, Z
     83a:	8e 7f       	andi	r24, 0xFE	; 254
     83c:	80 83       	st	Z, r24
     83e:	13 86       	std	Z+11, r1	; 0x0b
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	08 95       	ret

00000844 <I2C_0_do_I2C_SEND_STOP>:
     844:	e0 e2       	ldi	r30, 0x20	; 32
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	84 81       	ldd	r24, Z+4	; 0x04
     84a:	83 60       	ori	r24, 0x03	; 3
     84c:	84 83       	std	Z+4, r24	; 0x04
     84e:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_0_do_I2C_IDLE>
     852:	08 95       	ret

00000854 <I2C_0_do_I2C_SEND_ADR_READ>:
     854:	e9 ea       	ldi	r30, 0xA9	; 169
     856:	f0 e6       	ldi	r31, 0x60	; 96
     858:	80 81       	ld	r24, Z
     85a:	88 60       	ori	r24, 0x08	; 8
     85c:	80 83       	st	Z, r24
     85e:	81 81       	ldd	r24, Z+1	; 0x01
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	81 60       	ori	r24, 0x01	; 1
     868:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7f0927>
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	08 95       	ret

00000870 <I2C_0_do_I2C_SEND_RESTART>:
     870:	0e 94 2a 04 	call	0x854	; 0x854 <I2C_0_do_I2C_SEND_ADR_READ>
     874:	08 95       	ret

00000876 <I2C_0_do_I2C_SEND_RESTART_READ>:
     876:	0e 94 2a 04 	call	0x854	; 0x854 <I2C_0_do_I2C_SEND_ADR_READ>
     87a:	08 95       	ret

0000087c <I2C_0_do_I2C_SEND_ADR_WRITE>:
     87c:	e9 ea       	ldi	r30, 0xA9	; 169
     87e:	f0 e6       	ldi	r31, 0x60	; 96
     880:	80 81       	ld	r24, Z
     882:	88 60       	ori	r24, 0x08	; 8
     884:	80 83       	st	Z, r24
     886:	81 81       	ldd	r24, Z+1	; 0x01
     888:	88 0f       	add	r24, r24
     88a:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7f0927>
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	08 95       	ret

00000892 <I2C_0_do_I2C_SEND_RESTART_WRITE>:
     892:	0e 94 3e 04 	call	0x87c	; 0x87c <I2C_0_do_I2C_SEND_ADR_WRITE>
     896:	08 95       	ret

00000898 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
     898:	a9 ea       	ldi	r26, 0xA9	; 169
     89a:	b0 e6       	ldi	r27, 0x60	; 96
     89c:	8c 91       	ld	r24, X
     89e:	87 7f       	andi	r24, 0xF7	; 247
     8a0:	8c 93       	st	X, r24
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	1b 96       	adiw	r26, 0x0b	; 11
     8a6:	8c 93       	st	X, r24
     8a8:	1b 97       	sbiw	r26, 0x0b	; 11
     8aa:	50 96       	adiw	r26, 0x10	; 16
     8ac:	ed 91       	ld	r30, X+
     8ae:	fc 91       	ld	r31, X
     8b0:	51 97       	sbiw	r26, 0x11	; 17
     8b2:	5c 96       	adiw	r26, 0x1c	; 28
     8b4:	8d 91       	ld	r24, X+
     8b6:	9c 91       	ld	r25, X
     8b8:	5d 97       	sbiw	r26, 0x1d	; 29
     8ba:	09 95       	icall
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	19 f0       	breq	.+6      	; 0x8c6 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
     8c0:	83 30       	cpi	r24, 0x03	; 3
     8c2:	21 f0       	breq	.+8      	; 0x8cc <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
     8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3a>
     8c6:	0e 94 3b 04 	call	0x876	; 0x876 <I2C_0_do_I2C_SEND_RESTART_READ>
     8ca:	08 95       	ret
     8cc:	0e 94 49 04 	call	0x892	; 0x892 <I2C_0_do_I2C_SEND_RESTART_WRITE>
     8d0:	08 95       	ret
     8d2:	0e 94 22 04 	call	0x844	; 0x844 <I2C_0_do_I2C_SEND_STOP>
     8d6:	08 95       	ret

000008d8 <I2C_0_do_I2C_RX_DO_ACK>:
     8d8:	e0 e2       	ldi	r30, 0x20	; 32
     8da:	f9 e0       	ldi	r31, 0x09	; 9
     8dc:	84 81       	ldd	r24, Z+4	; 0x04
     8de:	8b 7f       	andi	r24, 0xFB	; 251
     8e0:	84 83       	std	Z+4, r24	; 0x04
     8e2:	84 e0       	ldi	r24, 0x04	; 4
     8e4:	08 95       	ret

000008e6 <I2C_0_do_I2C_TX_DO_ACK>:
     8e6:	e0 e2       	ldi	r30, 0x20	; 32
     8e8:	f9 e0       	ldi	r31, 0x09	; 9
     8ea:	84 81       	ldd	r24, Z+4	; 0x04
     8ec:	8b 7f       	andi	r24, 0xFB	; 251
     8ee:	84 83       	std	Z+4, r24	; 0x04
     8f0:	83 e0       	ldi	r24, 0x03	; 3
     8f2:	08 95       	ret

000008f4 <I2C_0_do_I2C_DO_NACK_STOP>:
     8f4:	e0 e2       	ldi	r30, 0x20	; 32
     8f6:	f9 e0       	ldi	r31, 0x09	; 9
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	84 60       	ori	r24, 0x04	; 4
     8fc:	84 83       	std	Z+4, r24	; 0x04
     8fe:	84 81       	ldd	r24, Z+4	; 0x04
     900:	83 60       	ori	r24, 0x03	; 3
     902:	84 83       	std	Z+4, r24	; 0x04
     904:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_0_do_I2C_IDLE>
     908:	08 95       	ret

0000090a <I2C_0_do_I2C_DO_NACK_RESTART>:
     90a:	e0 e2       	ldi	r30, 0x20	; 32
     90c:	f9 e0       	ldi	r31, 0x09	; 9
     90e:	84 81       	ldd	r24, Z+4	; 0x04
     910:	84 60       	ori	r24, 0x04	; 4
     912:	84 83       	std	Z+4, r24	; 0x04
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	08 95       	ret

00000918 <I2C_0_do_I2C_TX>:
     918:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     91c:	84 ff       	sbrs	r24, 4
     91e:	19 c0       	rjmp	.+50     	; 0x952 <I2C_0_do_I2C_TX+0x3a>
     920:	a9 ea       	ldi	r26, 0xA9	; 169
     922:	b0 e6       	ldi	r27, 0x60	; 96
     924:	52 96       	adiw	r26, 0x12	; 18
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	53 97       	sbiw	r26, 0x13	; 19
     92c:	5e 96       	adiw	r26, 0x1e	; 30
     92e:	8d 91       	ld	r24, X+
     930:	9c 91       	ld	r25, X
     932:	5f 97       	sbiw	r26, 0x1f	; 31
     934:	09 95       	icall
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	19 f0       	breq	.+6      	; 0x940 <I2C_0_do_I2C_TX+0x28>
     93a:	83 30       	cpi	r24, 0x03	; 3
     93c:	21 f0       	breq	.+8      	; 0x946 <I2C_0_do_I2C_TX+0x2e>
     93e:	06 c0       	rjmp	.+12     	; 0x94c <I2C_0_do_I2C_TX+0x34>
     940:	0e 94 3b 04 	call	0x876	; 0x876 <I2C_0_do_I2C_SEND_RESTART_READ>
     944:	08 95       	ret
     946:	0e 94 49 04 	call	0x892	; 0x892 <I2C_0_do_I2C_SEND_RESTART_WRITE>
     94a:	08 95       	ret
     94c:	0e 94 22 04 	call	0x844	; 0x844 <I2C_0_do_I2C_SEND_STOP>
     950:	08 95       	ret
     952:	e9 ea       	ldi	r30, 0xA9	; 169
     954:	f0 e6       	ldi	r31, 0x60	; 96
     956:	80 81       	ld	r24, Z
     958:	87 7f       	andi	r24, 0xF7	; 247
     95a:	80 83       	st	Z, r24
     95c:	a2 81       	ldd	r26, Z+2	; 0x02
     95e:	b3 81       	ldd	r27, Z+3	; 0x03
     960:	cd 01       	movw	r24, r26
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	82 83       	std	Z+2, r24	; 0x02
     966:	93 83       	std	Z+3, r25	; 0x03
     968:	8c 91       	ld	r24, X
     96a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7f0928>
     96e:	84 81       	ldd	r24, Z+4	; 0x04
     970:	95 81       	ldd	r25, Z+5	; 0x05
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	84 83       	std	Z+4, r24	; 0x04
     976:	95 83       	std	Z+5, r25	; 0x05
     978:	89 2b       	or	r24, r25
     97a:	11 f0       	breq	.+4      	; 0x980 <I2C_0_do_I2C_TX+0x68>
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	08 95       	ret
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	08 95       	ret

00000984 <I2C_0_do_I2C_RX>:
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	e9 ea       	ldi	r30, 0xA9	; 169
     98a:	f0 e6       	ldi	r31, 0x60	; 96
     98c:	80 81       	ld	r24, Z
     98e:	87 7f       	andi	r24, 0xF7	; 247
     990:	80 83       	st	Z, r24
     992:	84 81       	ldd	r24, Z+4	; 0x04
     994:	95 81       	ldd	r25, Z+5	; 0x05
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	31 f4       	brne	.+12     	; 0x9a6 <I2C_0_do_I2C_RX+0x22>
     99a:	e0 e2       	ldi	r30, 0x20	; 32
     99c:	f9 e0       	ldi	r31, 0x09	; 9
     99e:	84 81       	ldd	r24, Z+4	; 0x04
     9a0:	84 60       	ori	r24, 0x04	; 4
     9a2:	84 83       	std	Z+4, r24	; 0x04
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <I2C_0_do_I2C_RX+0x2c>
     9a6:	e0 e2       	ldi	r30, 0x20	; 32
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	84 81       	ldd	r24, Z+4	; 0x04
     9ac:	8b 7f       	andi	r24, 0xFB	; 251
     9ae:	84 83       	std	Z+4, r24	; 0x04
     9b0:	e9 ea       	ldi	r30, 0xA9	; 169
     9b2:	f0 e6       	ldi	r31, 0x60	; 96
     9b4:	84 81       	ldd	r24, Z+4	; 0x04
     9b6:	95 81       	ldd	r25, Z+5	; 0x05
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	84 83       	std	Z+4, r24	; 0x04
     9bc:	95 83       	std	Z+5, r25	; 0x05
     9be:	89 2b       	or	r24, r25
     9c0:	a9 f0       	breq	.+42     	; 0x9ec <I2C_0_do_I2C_RX+0x68>
     9c2:	df 01       	movw	r26, r30
     9c4:	c2 81       	ldd	r28, Z+2	; 0x02
     9c6:	d3 81       	ldd	r29, Z+3	; 0x03
     9c8:	e0 e2       	ldi	r30, 0x20	; 32
     9ca:	f9 e0       	ldi	r31, 0x09	; 9
     9cc:	80 85       	ldd	r24, Z+8	; 0x08
     9ce:	88 83       	st	Y, r24
     9d0:	12 96       	adiw	r26, 0x02	; 2
     9d2:	8d 91       	ld	r24, X+
     9d4:	9c 91       	ld	r25, X
     9d6:	13 97       	sbiw	r26, 0x03	; 3
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	12 96       	adiw	r26, 0x02	; 2
     9dc:	8d 93       	st	X+, r24
     9de:	9c 93       	st	X, r25
     9e0:	13 97       	sbiw	r26, 0x03	; 3
     9e2:	84 81       	ldd	r24, Z+4	; 0x04
     9e4:	82 60       	ori	r24, 0x02	; 2
     9e6:	84 83       	std	Z+4, r24	; 0x04
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	26 c0       	rjmp	.+76     	; 0xa38 <I2C_0_do_I2C_RX+0xb4>
     9ec:	a9 ea       	ldi	r26, 0xA9	; 169
     9ee:	b0 e6       	ldi	r27, 0x60	; 96
     9f0:	12 96       	adiw	r26, 0x02	; 2
     9f2:	ed 91       	ld	r30, X+
     9f4:	fc 91       	ld	r31, X
     9f6:	13 97       	sbiw	r26, 0x03	; 3
     9f8:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7f0928>
     9fc:	80 83       	st	Z, r24
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	8d 91       	ld	r24, X+
     a02:	9c 91       	ld	r25, X
     a04:	13 97       	sbiw	r26, 0x03	; 3
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	12 96       	adiw	r26, 0x02	; 2
     a0a:	8d 93       	st	X+, r24
     a0c:	9c 93       	st	X, r25
     a0e:	13 97       	sbiw	r26, 0x03	; 3
     a10:	8c 91       	ld	r24, X
     a12:	84 60       	ori	r24, 0x04	; 4
     a14:	8c 93       	st	X, r24
     a16:	1c 96       	adiw	r26, 0x0c	; 12
     a18:	ed 91       	ld	r30, X+
     a1a:	fc 91       	ld	r31, X
     a1c:	1d 97       	sbiw	r26, 0x0d	; 13
     a1e:	58 96       	adiw	r26, 0x18	; 24
     a20:	8d 91       	ld	r24, X+
     a22:	9c 91       	ld	r25, X
     a24:	59 97       	sbiw	r26, 0x19	; 25
     a26:	09 95       	icall
     a28:	82 50       	subi	r24, 0x02	; 2
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	18 f4       	brcc	.+6      	; 0xa34 <I2C_0_do_I2C_RX+0xb0>
     a2e:	0e 94 85 04 	call	0x90a	; 0x90a <I2C_0_do_I2C_DO_NACK_RESTART>
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <I2C_0_do_I2C_RX+0xb4>
     a34:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <I2C_0_do_I2C_DO_NACK_STOP>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <I2C_0_do_I2C_TX_EMPTY>:
     a3e:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     a42:	84 ff       	sbrs	r24, 4
     a44:	19 c0       	rjmp	.+50     	; 0xa78 <I2C_0_do_I2C_TX_EMPTY+0x3a>
     a46:	a9 ea       	ldi	r26, 0xA9	; 169
     a48:	b0 e6       	ldi	r27, 0x60	; 96
     a4a:	52 96       	adiw	r26, 0x12	; 18
     a4c:	ed 91       	ld	r30, X+
     a4e:	fc 91       	ld	r31, X
     a50:	53 97       	sbiw	r26, 0x13	; 19
     a52:	5e 96       	adiw	r26, 0x1e	; 30
     a54:	8d 91       	ld	r24, X+
     a56:	9c 91       	ld	r25, X
     a58:	5f 97       	sbiw	r26, 0x1f	; 31
     a5a:	09 95       	icall
     a5c:	82 30       	cpi	r24, 0x02	; 2
     a5e:	19 f0       	breq	.+6      	; 0xa66 <I2C_0_do_I2C_TX_EMPTY+0x28>
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	21 f0       	breq	.+8      	; 0xa6c <I2C_0_do_I2C_TX_EMPTY+0x2e>
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <I2C_0_do_I2C_TX_EMPTY+0x34>
     a66:	0e 94 3b 04 	call	0x876	; 0x876 <I2C_0_do_I2C_SEND_RESTART_READ>
     a6a:	08 95       	ret
     a6c:	0e 94 49 04 	call	0x892	; 0x892 <I2C_0_do_I2C_SEND_RESTART_WRITE>
     a70:	08 95       	ret
     a72:	0e 94 22 04 	call	0x844	; 0x844 <I2C_0_do_I2C_SEND_STOP>
     a76:	08 95       	ret
     a78:	a9 ea       	ldi	r26, 0xA9	; 169
     a7a:	b0 e6       	ldi	r27, 0x60	; 96
     a7c:	8c 91       	ld	r24, X
     a7e:	84 60       	ori	r24, 0x04	; 4
     a80:	8c 93       	st	X, r24
     a82:	1c 96       	adiw	r26, 0x0c	; 12
     a84:	ed 91       	ld	r30, X+
     a86:	fc 91       	ld	r31, X
     a88:	1d 97       	sbiw	r26, 0x0d	; 13
     a8a:	58 96       	adiw	r26, 0x18	; 24
     a8c:	8d 91       	ld	r24, X+
     a8e:	9c 91       	ld	r25, X
     a90:	59 97       	sbiw	r26, 0x19	; 25
     a92:	09 95       	icall
     a94:	83 30       	cpi	r24, 0x03	; 3
     a96:	39 f0       	breq	.+14     	; 0xaa6 <I2C_0_do_I2C_TX_EMPTY+0x68>
     a98:	84 30       	cpi	r24, 0x04	; 4
     a9a:	41 f0       	breq	.+16     	; 0xaac <I2C_0_do_I2C_TX_EMPTY+0x6e>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	49 f4       	brne	.+18     	; 0xab2 <I2C_0_do_I2C_TX_EMPTY+0x74>
     aa0:	0e 94 3b 04 	call	0x876	; 0x876 <I2C_0_do_I2C_SEND_RESTART_READ>
     aa4:	08 95       	ret
     aa6:	0e 94 49 04 	call	0x892	; 0x892 <I2C_0_do_I2C_SEND_RESTART_WRITE>
     aaa:	08 95       	ret
     aac:	0e 94 8c 04 	call	0x918	; 0x918 <I2C_0_do_I2C_TX>
     ab0:	08 95       	ret
     ab2:	0e 94 22 04 	call	0x844	; 0x844 <I2C_0_do_I2C_SEND_STOP>
     ab6:	08 95       	ret

00000ab8 <I2C_0_do_I2C_BUS_COLLISION>:
     ab8:	e0 e2       	ldi	r30, 0x20	; 32
     aba:	f9 e0       	ldi	r31, 0x09	; 9
     abc:	85 81       	ldd	r24, Z+5	; 0x05
     abe:	88 60       	ori	r24, 0x08	; 8
     ac0:	85 83       	std	Z+5, r24	; 0x05
     ac2:	a9 ea       	ldi	r26, 0xA9	; 169
     ac4:	b0 e6       	ldi	r27, 0x60	; 96
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	1b 96       	adiw	r26, 0x0b	; 11
     aca:	8c 93       	st	X, r24
     acc:	1b 97       	sbiw	r26, 0x0b	; 11
     ace:	1e 96       	adiw	r26, 0x0e	; 14
     ad0:	ed 91       	ld	r30, X+
     ad2:	fc 91       	ld	r31, X
     ad4:	1f 97       	sbiw	r26, 0x0f	; 15
     ad6:	5a 96       	adiw	r26, 0x1a	; 26
     ad8:	8d 91       	ld	r24, X+
     ada:	9c 91       	ld	r25, X
     adc:	5b 97       	sbiw	r26, 0x1b	; 27
     ade:	09 95       	icall
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	19 f0       	breq	.+6      	; 0xaea <I2C_0_do_I2C_BUS_COLLISION+0x32>
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <I2C_0_do_I2C_BUS_COLLISION+0x38>
     ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <I2C_0_do_I2C_BUS_COLLISION+0x3e>
     aea:	0e 94 3b 04 	call	0x876	; 0x876 <I2C_0_do_I2C_SEND_RESTART_READ>
     aee:	08 95       	ret
     af0:	0e 94 49 04 	call	0x892	; 0x892 <I2C_0_do_I2C_SEND_RESTART_WRITE>
     af4:	08 95       	ret
     af6:	0e 94 0a 04 	call	0x814	; 0x814 <I2C_0_do_I2C_RESET>
     afa:	08 95       	ret

00000afc <I2C_0_do_I2C_BUS_ERROR>:
     afc:	e0 e2       	ldi	r30, 0x20	; 32
     afe:	f9 e0       	ldi	r31, 0x09	; 9
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	88 60       	ori	r24, 0x08	; 8
     b04:	84 83       	std	Z+4, r24	; 0x04
     b06:	85 81       	ldd	r24, Z+5	; 0x05
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	85 83       	std	Z+5, r24	; 0x05
     b0c:	e9 ea       	ldi	r30, 0xA9	; 169
     b0e:	f0 e6       	ldi	r31, 0x60	; 96
     b10:	80 81       	ld	r24, Z
     b12:	8e 7f       	andi	r24, 0xFE	; 254
     b14:	80 83       	st	Z, r24
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	83 87       	std	Z+11, r24	; 0x0b
     b1a:	8e e0       	ldi	r24, 0x0E	; 14
     b1c:	08 95       	ret

00000b1e <I2C_0_master_isr>:
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	e0 e2       	ldi	r30, 0x20	; 32
     b24:	f9 e0       	ldi	r31, 0x09	; 9
     b26:	85 81       	ldd	r24, Z+5	; 0x05
     b28:	80 6c       	ori	r24, 0xC0	; 192
     b2a:	85 83       	std	Z+5, r24	; 0x05
     b2c:	80 91 a9 60 	lds	r24, 0x60A9	; 0x8060a9 <I2C_0_status>
     b30:	83 ff       	sbrs	r24, 3
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <I2C_0_master_isr+0x24>
     b34:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     b38:	84 ff       	sbrs	r24, 4
     b3a:	03 c0       	rjmp	.+6      	; 0xb42 <I2C_0_master_isr+0x24>
     b3c:	8f e0       	ldi	r24, 0x0F	; 15
     b3e:	80 93 b3 60 	sts	0x60B3, r24	; 0x8060b3 <I2C_0_status+0xa>
     b42:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     b46:	83 ff       	sbrs	r24, 3
     b48:	03 c0       	rjmp	.+6      	; 0xb50 <I2C_0_master_isr+0x32>
     b4a:	80 e1       	ldi	r24, 0x10	; 16
     b4c:	80 93 b3 60 	sts	0x60B3, r24	; 0x8060b3 <I2C_0_status+0xa>
     b50:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     b54:	82 ff       	sbrs	r24, 2
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <I2C_0_master_isr+0x40>
     b58:	81 e1       	ldi	r24, 0x11	; 17
     b5a:	80 93 b3 60 	sts	0x60B3, r24	; 0x8060b3 <I2C_0_status+0xa>
     b5e:	c9 ea       	ldi	r28, 0xA9	; 169
     b60:	d0 e6       	ldi	r29, 0x60	; 96
     b62:	ea 85       	ldd	r30, Y+10	; 0x0a
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	e0 50       	subi	r30, 0x00	; 0
     b6c:	f0 4a       	sbci	r31, 0xA0	; 160
     b6e:	01 90       	ld	r0, Z+
     b70:	f0 81       	ld	r31, Z
     b72:	e0 2d       	mov	r30, r0
     b74:	09 95       	icall
     b76:	8a 87       	std	Y+10, r24	; 0x0a
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <I2C_0_return_stop>:
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	08 95       	ret

00000b82 <I2C_0_return_reset>:
     b82:	85 e0       	ldi	r24, 0x05	; 5
     b84:	08 95       	ret

00000b86 <I2C_0_set_callback>:
     b86:	61 15       	cp	r22, r1
     b88:	71 05       	cpc	r23, r1
     b8a:	91 f0       	breq	.+36     	; 0xbb0 <I2C_0_set_callback+0x2a>
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	fc 01       	movw	r30, r24
     b90:	36 96       	adiw	r30, 0x06	; 6
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	e7 55       	subi	r30, 0x57	; 87
     b98:	ff 49       	sbci	r31, 0x9F	; 159
     b9a:	60 83       	st	Z, r22
     b9c:	71 83       	std	Z+1, r23	; 0x01
     b9e:	fc 01       	movw	r30, r24
     ba0:	3c 96       	adiw	r30, 0x0c	; 12
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	e7 55       	subi	r30, 0x57	; 87
     ba8:	ff 49       	sbci	r31, 0x9F	; 159
     baa:	40 83       	st	Z, r20
     bac:	51 83       	std	Z+1, r21	; 0x01
     bae:	08 95       	ret
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	fc 01       	movw	r30, r24
     bb4:	36 96       	adiw	r30, 0x06	; 6
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	e7 55       	subi	r30, 0x57	; 87
     bbc:	ff 49       	sbci	r31, 0x9F	; 159
     bbe:	2f eb       	ldi	r18, 0xBF	; 191
     bc0:	35 e0       	ldi	r19, 0x05	; 5
     bc2:	20 83       	st	Z, r18
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	fc 01       	movw	r30, r24
     bc8:	3c 96       	adiw	r30, 0x0c	; 12
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	e7 55       	subi	r30, 0x57	; 87
     bd0:	ff 49       	sbci	r31, 0x9F	; 159
     bd2:	10 82       	st	Z, r1
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	08 95       	ret

00000bd8 <I2C_0_set_data_complete_callback>:
     bd8:	ab 01       	movw	r20, r22
     bda:	bc 01       	movw	r22, r24
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 c3 05 	call	0xb86	; 0xb86 <I2C_0_set_callback>
     be2:	08 95       	ret

00000be4 <I2C_0_set_address_nack_callback>:
     be4:	ab 01       	movw	r20, r22
     be6:	bc 01       	movw	r22, r24
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	0e 94 c3 05 	call	0xb86	; 0xb86 <I2C_0_set_callback>
     bee:	08 95       	ret

00000bf0 <I2C_0_init>:
     bf0:	e0 e2       	ldi	r30, 0x20	; 32
     bf2:	f9 e0       	ldi	r31, 0x09	; 9
     bf4:	8f e5       	ldi	r24, 0x5F	; 95
     bf6:	86 83       	std	Z+6, r24	; 0x06
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	83 83       	std	Z+3, r24	; 0x03
     bfc:	08 95       	ret

00000bfe <I2C_0_open>:
     bfe:	90 91 a9 60 	lds	r25, 0x60A9	; 0x8060a9 <I2C_0_status>
     c02:	91 fd       	sbrc	r25, 1
     c04:	34 c0       	rjmp	.+104    	; 0xc6e <I2C_0_open+0x70>
     c06:	e9 ea       	ldi	r30, 0xA9	; 169
     c08:	f0 e6       	ldi	r31, 0x60	; 96
     c0a:	81 83       	std	Z+1, r24	; 0x01
     c0c:	89 2f       	mov	r24, r25
     c0e:	8e 7f       	andi	r24, 0xFE	; 254
     c10:	82 60       	ori	r24, 0x02	; 2
     c12:	9e e0       	ldi	r25, 0x0E	; 14
     c14:	92 87       	std	Z+10, r25	; 0x0a
     c16:	24 ef       	ldi	r18, 0xF4	; 244
     c18:	31 e0       	ldi	r19, 0x01	; 1
     c1a:	20 87       	std	Z+8, r18	; 0x08
     c1c:	31 87       	std	Z+9, r19	; 0x09
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	84 60       	ori	r24, 0x04	; 4
     c22:	80 83       	st	Z, r24
     c24:	8f eb       	ldi	r24, 0xBF	; 191
     c26:	95 e0       	ldi	r25, 0x05	; 5
     c28:	84 87       	std	Z+12, r24	; 0x0c
     c2a:	95 87       	std	Z+13, r25	; 0x0d
     c2c:	10 8e       	std	Z+24, r1	; 0x18
     c2e:	11 8e       	std	Z+25, r1	; 0x19
     c30:	86 87       	std	Z+14, r24	; 0x0e
     c32:	97 87       	std	Z+15, r25	; 0x0f
     c34:	12 8e       	std	Z+26, r1	; 0x1a
     c36:	13 8e       	std	Z+27, r1	; 0x1b
     c38:	80 8b       	std	Z+16, r24	; 0x10
     c3a:	91 8b       	std	Z+17, r25	; 0x11
     c3c:	14 8e       	std	Z+28, r1	; 0x1c
     c3e:	15 8e       	std	Z+29, r1	; 0x1d
     c40:	82 8b       	std	Z+18, r24	; 0x12
     c42:	93 8b       	std	Z+19, r25	; 0x13
     c44:	16 8e       	std	Z+30, r1	; 0x1e
     c46:	17 8e       	std	Z+31, r1	; 0x1f
     c48:	81 ec       	ldi	r24, 0xC1	; 193
     c4a:	95 e0       	ldi	r25, 0x05	; 5
     c4c:	84 8b       	std	Z+20, r24	; 0x14
     c4e:	95 8b       	std	Z+21, r25	; 0x15
     c50:	10 a2       	std	Z+32, r1	; 0x20
     c52:	11 a2       	std	Z+33, r1	; 0x21
     c54:	e0 e2       	ldi	r30, 0x20	; 32
     c56:	f9 e0       	ldi	r31, 0x09	; 9
     c58:	84 81       	ldd	r24, Z+4	; 0x04
     c5a:	88 60       	ori	r24, 0x08	; 8
     c5c:	84 83       	std	Z+4, r24	; 0x04
     c5e:	85 81       	ldd	r24, Z+5	; 0x05
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	85 83       	std	Z+5, r24	; 0x05
     c64:	85 81       	ldd	r24, Z+5	; 0x05
     c66:	80 6c       	ori	r24, 0xC0	; 192
     c68:	85 83       	std	Z+5, r24	; 0x05
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	08 95       	ret
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	08 95       	ret

00000c72 <I2C_0_close>:
     c72:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     c76:	82 ff       	sbrs	r24, 2
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <I2C_0_close+0x16>
     c7a:	e9 ea       	ldi	r30, 0xA9	; 169
     c7c:	f0 e6       	ldi	r31, 0x60	; 96
     c7e:	80 81       	ld	r24, Z
     c80:	8e 7f       	andi	r24, 0xFE	; 254
     c82:	80 83       	st	Z, r24
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	83 87       	std	Z+11, r24	; 0x0b
     c88:	80 91 a9 60 	lds	r24, 0x60A9	; 0x8060a9 <I2C_0_status>
     c8c:	80 fd       	sbrc	r24, 0
     c8e:	17 c0       	rjmp	.+46     	; 0xcbe <I2C_0_close+0x4c>
     c90:	e9 ea       	ldi	r30, 0xA9	; 169
     c92:	f0 e6       	ldi	r31, 0x60	; 96
     c94:	8d 7f       	andi	r24, 0xFD	; 253
     c96:	80 83       	st	Z, r24
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	81 83       	std	Z+1, r24	; 0x01
     c9c:	a0 e2       	ldi	r26, 0x20	; 32
     c9e:	b9 e0       	ldi	r27, 0x09	; 9
     ca0:	15 96       	adiw	r26, 0x05	; 5
     ca2:	8c 91       	ld	r24, X
     ca4:	15 97       	sbiw	r26, 0x05	; 5
     ca6:	80 6c       	ori	r24, 0xC0	; 192
     ca8:	15 96       	adiw	r26, 0x05	; 5
     caa:	8c 93       	st	X, r24
     cac:	15 97       	sbiw	r26, 0x05	; 5
     cae:	13 96       	adiw	r26, 0x03	; 3
     cb0:	8c 91       	ld	r24, X
     cb2:	13 97       	sbiw	r26, 0x03	; 3
     cb4:	8f 73       	andi	r24, 0x3F	; 63
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	83 85       	ldd	r24, Z+11	; 0x0b
     cbc:	08 95       	ret
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	08 95       	ret

00000cc2 <I2C_0_set_buffer>:
     cc2:	9c 01       	movw	r18, r24
     cc4:	90 91 a9 60 	lds	r25, 0x60A9	; 0x8060a9 <I2C_0_status>
     cc8:	92 ff       	sbrs	r25, 2
     cca:	09 c0       	rjmp	.+18     	; 0xcde <I2C_0_set_buffer+0x1c>
     ccc:	e9 ea       	ldi	r30, 0xA9	; 169
     cce:	f0 e6       	ldi	r31, 0x60	; 96
     cd0:	22 83       	std	Z+2, r18	; 0x02
     cd2:	33 83       	std	Z+3, r19	; 0x03
     cd4:	64 83       	std	Z+4, r22	; 0x04
     cd6:	75 83       	std	Z+5, r23	; 0x05
     cd8:	89 2f       	mov	r24, r25
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	80 83       	st	Z, r24
     cde:	08 95       	ret

00000ce0 <I2C_0_master_operation>:
     ce0:	90 91 a9 60 	lds	r25, 0x60A9	; 0x8060a9 <I2C_0_status>
     ce4:	90 fd       	sbrc	r25, 0
     ce6:	2c c0       	rjmp	.+88     	; 0xd40 <I2C_0_master_operation+0x60>
     ce8:	e9 ea       	ldi	r30, 0xA9	; 169
     cea:	f0 e6       	ldi	r31, 0x60	; 96
     cec:	91 60       	ori	r25, 0x01	; 1
     cee:	90 83       	st	Z, r25
     cf0:	88 23       	and	r24, r24
     cf2:	21 f0       	breq	.+8      	; 0xcfc <I2C_0_master_operation+0x1c>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 b3 60 	sts	0x60B3, r24	; 0x8060b3 <I2C_0_status+0xa>
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <I2C_0_master_operation+0x22>
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	80 93 b3 60 	sts	0x60B3, r24	; 0x8060b3 <I2C_0_status+0xa>
     d02:	0e 94 8f 05 	call	0xb1e	; 0xb1e <I2C_0_master_isr>
     d06:	16 c0       	rjmp	.+44     	; 0xd34 <I2C_0_master_operation+0x54>
     d08:	8f e4       	ldi	r24, 0x4F	; 79
     d0a:	93 ec       	ldi	r25, 0xC3	; 195
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <I2C_0_master_operation+0x2c>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <I2C_0_master_operation+0x32>
     d12:	00 00       	nop
     d14:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     d18:	88 23       	and	r24, r24
     d1a:	24 f0       	brlt	.+8      	; 0xd24 <I2C_0_master_operation+0x44>
     d1c:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7f0925>
     d20:	86 ff       	sbrs	r24, 6
     d22:	f8 cf       	rjmp	.-16     	; 0xd14 <I2C_0_master_operation+0x34>
     d24:	8f e4       	ldi	r24, 0x4F	; 79
     d26:	93 ec       	ldi	r25, 0xC3	; 195
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <I2C_0_master_operation+0x48>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <I2C_0_master_operation+0x4e>
     d2e:	00 00       	nop
     d30:	0e 94 8f 05 	call	0xb1e	; 0xb1e <I2C_0_master_isr>
     d34:	80 91 a9 60 	lds	r24, 0x60A9	; 0x8060a9 <I2C_0_status>
     d38:	80 fd       	sbrc	r24, 0
     d3a:	e6 cf       	rjmp	.-52     	; 0xd08 <I2C_0_master_operation+0x28>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	08 95       	ret
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	08 95       	ret

00000d44 <I2C_0_master_write>:
/**
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 70 06 	call	0xce0	; 0xce0 <I2C_0_master_operation>
}
     d4a:	08 95       	ret

00000d4c <I2C_0_rdBlkRegCompleteHandler>:
		; // sit here until finished.
	if (!timeout)
		return I2C_FAIL;

	return I2C_NOERR;
}
     d4c:	fc 01       	movw	r30, r24
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	0e 94 61 06 	call	0xcc2	; 0xcc2 <I2C_0_set_buffer>
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <I2C_0_set_data_complete_callback>
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	08 95       	ret

00000d6a <I2C_0_writeNBytes>:
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	18 2f       	mov	r17, r24
     d7a:	7b 01       	movw	r14, r22
     d7c:	6a 01       	movw	r12, r20
     d7e:	c0 e1       	ldi	r28, 0x10	; 16
     d80:	d7 e2       	ldi	r29, 0x27	; 39
     d82:	81 2f       	mov	r24, r17
     d84:	0e 94 ff 05 	call	0xbfe	; 0xbfe <I2C_0_open>
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	11 f4       	brne	.+4      	; 0xd90 <I2C_0_writeNBytes+0x26>
     d8c:	21 97       	sbiw	r28, 0x01	; 1
     d8e:	c9 f7       	brne	.-14     	; 0xd82 <I2C_0_writeNBytes+0x18>
     d90:	cd 2b       	or	r28, r29
     d92:	c1 f0       	breq	.+48     	; 0xdc4 <I2C_0_writeNBytes+0x5a>
     d94:	b6 01       	movw	r22, r12
     d96:	c7 01       	movw	r24, r14
     d98:	0e 94 61 06 	call	0xcc2	; 0xcc2 <I2C_0_set_buffer>
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	8d e3       	ldi	r24, 0x3D	; 61
     da2:	97 e0       	ldi	r25, 0x07	; 7
     da4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <I2C_0_set_address_nack_callback>
     da8:	0e 94 a2 06 	call	0xd44	; 0xd44 <I2C_0_master_write>
     dac:	c0 e1       	ldi	r28, 0x10	; 16
     dae:	d7 e2       	ldi	r29, 0x27	; 39
     db0:	0e 94 39 06 	call	0xc72	; 0xc72 <I2C_0_close>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	11 f4       	brne	.+4      	; 0xdbc <I2C_0_writeNBytes+0x52>
     db8:	21 97       	sbiw	r28, 0x01	; 1
     dba:	d1 f7       	brne	.-12     	; 0xdb0 <I2C_0_writeNBytes+0x46>
     dbc:	cd 2b       	or	r28, r29
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <I2C_0_writeNBytes+0x5e>
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <I2C_0_writeNBytes+0x60>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <I2C_0_writeNBytes+0x60>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	08 95       	ret

00000dda <I2C_0_readDataBlock_EEPROM>:
i2c_error_t I2C_0_readDataBlock_EEPROM(i2c_address_t address, void *address_ptr, size_t address_ptr_len, void *data, size_t len) {
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	00 d0       	rcall	.+0      	; 0xdee <I2C_0_readDataBlock_EEPROM+0x14>
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <I2C_0_readDataBlock_EEPROM+0x16>
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	f8 2e       	mov	r15, r24
     df6:	6b 01       	movw	r12, r22
     df8:	5a 01       	movw	r10, r20
	/* timeout is used to get out of twim_release, when there is no device connected to the bus*/
	uint16_t timeout = I2C_TIMEOUT;
	// result is little endian
	I2C_0_buf_t d;
	d.data = data;
     dfa:	2b 83       	std	Y+3, r18	; 0x03
     dfc:	3c 83       	std	Y+4, r19	; 0x04
	d.len  = len;
     dfe:	09 83       	std	Y+1, r16	; 0x01
     e00:	1a 83       	std	Y+2, r17	; 0x02

	return I2C_NOERR;
}
i2c_error_t I2C_0_readDataBlock_EEPROM(i2c_address_t address, void *address_ptr, size_t address_ptr_len, void *data, size_t len) {
	/* timeout is used to get out of twim_release, when there is no device connected to the bus*/
	uint16_t timeout = I2C_TIMEOUT;
     e02:	00 e1       	ldi	r16, 0x10	; 16
     e04:	17 e2       	ldi	r17, 0x27	; 39
	// result is little endian
	I2C_0_buf_t d;
	d.data = data;
	d.len  = len;
	while (I2C_BUSY == I2C_0_open(address)&&--timeout); // sit here until we get the bus..
     e06:	8f 2d       	mov	r24, r15
     e08:	0e 94 ff 05 	call	0xbfe	; 0xbfe <I2C_0_open>
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	19 f4       	brne	.+6      	; 0xe16 <I2C_0_readDataBlock_EEPROM+0x3c>
     e10:	01 50       	subi	r16, 0x01	; 1
     e12:	11 09       	sbc	r17, r1
     e14:	c1 f7       	brne	.-16     	; 0xe06 <I2C_0_readDataBlock_EEPROM+0x2c>
	if (!timeout)
     e16:	01 2b       	or	r16, r17
     e18:	01 f1       	breq	.+64     	; 0xe5a <I2C_0_readDataBlock_EEPROM+0x80>
	return I2C_BUSY;
	I2C_0_set_data_complete_callback(I2C_0_rdBlkRegCompleteHandler,&d);
     e1a:	be 01       	movw	r22, r28
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	86 ea       	ldi	r24, 0xA6	; 166
     e22:	96 e0       	ldi	r25, 0x06	; 6
     e24:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <I2C_0_set_data_complete_callback>
	I2C_0_set_buffer(address_ptr, address_ptr_len);
     e28:	b5 01       	movw	r22, r10
     e2a:	c6 01       	movw	r24, r12
     e2c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <I2C_0_set_buffer>
	I2C_0_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	8d e3       	ldi	r24, 0x3D	; 61
     e36:	97 e0       	ldi	r25, 0x07	; 7
     e38:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <I2C_0_set_address_nack_callback>
	I2C_0_master_write();
     e3c:	0e 94 a2 06 	call	0xd44	; 0xd44 <I2C_0_master_write>
	timeout = I2C_TIMEOUT;
     e40:	00 e1       	ldi	r16, 0x10	; 16
     e42:	17 e2       	ldi	r17, 0x27	; 39
	while (I2C_BUSY == I2C_0_close() && --timeout); // sit here until finished.
     e44:	0e 94 39 06 	call	0xc72	; 0xc72 <I2C_0_close>
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	19 f4       	brne	.+6      	; 0xe52 <I2C_0_readDataBlock_EEPROM+0x78>
     e4c:	01 50       	subi	r16, 0x01	; 1
     e4e:	11 09       	sbc	r17, r1
     e50:	c9 f7       	brne	.-14     	; 0xe44 <I2C_0_readDataBlock_EEPROM+0x6a>
	if (!timeout)
     e52:	01 2b       	or	r16, r17
     e54:	21 f4       	brne	.+8      	; 0xe5e <I2C_0_readDataBlock_EEPROM+0x84>
	return I2C_FAIL;
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <I2C_0_readDataBlock_EEPROM+0x86>
	I2C_0_buf_t d;
	d.data = data;
	d.len  = len;
	while (I2C_BUSY == I2C_0_open(address)&&--timeout); // sit here until we get the bus..
	if (!timeout)
	return I2C_BUSY;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <I2C_0_readDataBlock_EEPROM+0x86>
	I2C_0_master_write();
	timeout = I2C_TIMEOUT;
	while (I2C_BUSY == I2C_0_close() && --timeout); // sit here until finished.
	if (!timeout)
	return I2C_FAIL;
	return I2C_NOERR;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	24 96       	adiw	r28, 0x04	; 4
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	08 95       	ret

00000e7a <i2c_cb_restart_write>:
}

i2c_operations_t i2c_cb_restart_write(void *p)
{
	return i2c_restart_write;
}
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	08 95       	ret

00000e7e <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     e7e:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     e80:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     e82:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     e84:	40 83       	st	Z, r20
	ret                             // Return to caller
     e86:	08 95       	ret

00000e88 <RGB_init>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     e88:	84 b1       	in	r24, 0x04	; 4
     e8a:	80 68       	ori	r24, 0x80	; 128
     e8c:	84 b9       	out	0x04, r24	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     e8e:	88 b1       	in	r24, 0x08	; 8
     e90:	88 60       	ori	r24, 0x08	; 8
     e92:	88 b9       	out	0x08, r24	; 8
     e94:	88 b1       	in	r24, 0x08	; 8
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	88 b9       	out	0x08, r24	; 8
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     e9a:	8c b1       	in	r24, 0x0c	; 12
     e9c:	88 60       	ori	r24, 0x08	; 8
     e9e:	8c b9       	out	0x0c, r24	; 12
     ea0:	8c b1       	in	r24, 0x0c	; 12
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	8c b9       	out	0x0c, r24	; 12
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     ea6:	80 b3       	in	r24, 0x10	; 16
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	80 bb       	out	0x10, r24	; 16
     eac:	80 b3       	in	r24, 0x10	; 16
     eae:	80 68       	ori	r24, 0x80	; 128
     eb0:	80 bb       	out	0x10, r24	; 16
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     eb2:	80 b1       	in	r24, 0x00	; 0
     eb4:	80 64       	ori	r24, 0x40	; 64
     eb6:	80 b9       	out	0x00, r24	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     eb8:	88 b3       	in	r24, 0x18	; 24
     eba:	88 60       	ori	r24, 0x08	; 8
     ebc:	88 bb       	out	0x18, r24	; 24
     ebe:	88 b3       	in	r24, 0x18	; 24
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	88 bb       	out	0x18, r24	; 24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     ec4:	84 b1       	in	r24, 0x04	; 4
     ec6:	80 62       	ori	r24, 0x20	; 32
     ec8:	84 b9       	out	0x04, r24	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     eca:	88 b1       	in	r24, 0x08	; 8
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	88 b9       	out	0x08, r24	; 8
     ed0:	88 b1       	in	r24, 0x08	; 8
     ed2:	80 62       	ori	r24, 0x20	; 32
     ed4:	88 b9       	out	0x08, r24	; 8
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     ed6:	8c b1       	in	r24, 0x0c	; 12
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8c b9       	out	0x0c, r24	; 12
     edc:	8c b1       	in	r24, 0x0c	; 12
     ede:	80 62       	ori	r24, 0x20	; 32
     ee0:	8c b9       	out	0x0c, r24	; 12
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     ee2:	80 b3       	in	r24, 0x10	; 16
     ee4:	82 60       	ori	r24, 0x02	; 2
     ee6:	80 bb       	out	0x10, r24	; 16
     ee8:	80 b3       	in	r24, 0x10	; 16
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	80 bb       	out	0x10, r24	; 16
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     eee:	84 b3       	in	r24, 0x14	; 20
     ef0:	82 60       	ori	r24, 0x02	; 2
     ef2:	84 bb       	out	0x14, r24	; 20
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     ef4:	88 b3       	in	r24, 0x18	; 24
     ef6:	82 60       	ori	r24, 0x02	; 2
     ef8:	88 bb       	out	0x18, r24	; 24
     efa:	88 b3       	in	r24, 0x18	; 24
     efc:	80 62       	ori	r24, 0x20	; 32
     efe:	88 bb       	out	0x18, r24	; 24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     f00:	84 b1       	in	r24, 0x04	; 4
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	84 b9       	out	0x04, r24	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     f06:	88 b1       	in	r24, 0x08	; 8
     f08:	84 60       	ori	r24, 0x04	; 4
     f0a:	88 b9       	out	0x08, r24	; 8
     f0c:	88 b1       	in	r24, 0x08	; 8
     f0e:	80 64       	ori	r24, 0x40	; 64
     f10:	88 b9       	out	0x08, r24	; 8
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     f12:	8c b1       	in	r24, 0x0c	; 12
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	8c b9       	out	0x0c, r24	; 12
     f18:	8c b1       	in	r24, 0x0c	; 12
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c b9       	out	0x0c, r24	; 12
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     f1e:	80 b3       	in	r24, 0x10	; 16
     f20:	84 60       	ori	r24, 0x04	; 4
     f22:	80 bb       	out	0x10, r24	; 16
     f24:	80 b3       	in	r24, 0x10	; 16
     f26:	80 64       	ori	r24, 0x40	; 64
     f28:	80 bb       	out	0x10, r24	; 16
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     f2a:	84 b3       	in	r24, 0x14	; 20
     f2c:	84 60       	ori	r24, 0x04	; 4
     f2e:	84 bb       	out	0x14, r24	; 20
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     f30:	88 b3       	in	r24, 0x18	; 24
     f32:	84 60       	ori	r24, 0x04	; 4
     f34:	88 bb       	out	0x18, r24	; 24
     f36:	88 b3       	in	r24, 0x18	; 24
     f38:	80 64       	ori	r24, 0x40	; 64
     f3a:	88 bb       	out	0x18, r24	; 24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     f3c:	84 b1       	in	r24, 0x04	; 4
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	84 b9       	out	0x04, r24	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     f42:	88 b1       	in	r24, 0x08	; 8
     f44:	81 60       	ori	r24, 0x01	; 1
     f46:	88 b9       	out	0x08, r24	; 8
     f48:	88 b1       	in	r24, 0x08	; 8
     f4a:	80 61       	ori	r24, 0x10	; 16
     f4c:	88 b9       	out	0x08, r24	; 8
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     f4e:	8c b1       	in	r24, 0x0c	; 12
     f50:	81 60       	ori	r24, 0x01	; 1
     f52:	8c b9       	out	0x0c, r24	; 12
     f54:	8c b1       	in	r24, 0x0c	; 12
     f56:	80 61       	ori	r24, 0x10	; 16
     f58:	8c b9       	out	0x0c, r24	; 12
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
     f5a:	80 b3       	in	r24, 0x10	; 16
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	80 bb       	out	0x10, r24	; 16
     f60:	80 b3       	in	r24, 0x10	; 16
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	80 bb       	out	0x10, r24	; 16
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     f66:	84 b3       	in	r24, 0x14	; 20
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	84 bb       	out	0x14, r24	; 20
	switch (dir) {
	case PORT_DIR_IN:
		VPORTG.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTG.DIR |= (1 << pin);
     f6c:	88 b3       	in	r24, 0x18	; 24
     f6e:	81 60       	ori	r24, 0x01	; 1
     f70:	88 bb       	out	0x18, r24	; 24
     f72:	88 b3       	in	r24, 0x18	; 24
     f74:	80 61       	ori	r24, 0x10	; 16
     f76:	88 bb       	out	0x18, r24	; 24
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     f78:	85 b1       	in	r24, 0x05	; 5
     f7a:	80 62       	ori	r24, 0x20	; 32
     f7c:	85 b9       	out	0x05, r24	; 5
     f7e:	85 b1       	in	r24, 0x05	; 5
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	85 b9       	out	0x05, r24	; 5
     f84:	85 b1       	in	r24, 0x05	; 5
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	85 b9       	out	0x05, r24	; 5
     f8a:	85 b1       	in	r24, 0x05	; 5
     f8c:	80 61       	ori	r24, 0x10	; 16
     f8e:	85 b9       	out	0x05, r24	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     f90:	89 b1       	in	r24, 0x09	; 9
     f92:	82 60       	ori	r24, 0x02	; 2
     f94:	89 b9       	out	0x09, r24	; 9
     f96:	89 b1       	in	r24, 0x09	; 9
     f98:	84 60       	ori	r24, 0x04	; 4
     f9a:	89 b9       	out	0x09, r24	; 9
     f9c:	89 b1       	in	r24, 0x09	; 9
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	89 b9       	out	0x09, r24	; 9
     fa2:	89 b1       	in	r24, 0x09	; 9
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	89 b9       	out	0x09, r24	; 9
     fa8:	89 b1       	in	r24, 0x09	; 9
     faa:	80 62       	ori	r24, 0x20	; 32
     fac:	89 b9       	out	0x09, r24	; 9
     fae:	89 b1       	in	r24, 0x09	; 9
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	89 b9       	out	0x09, r24	; 9
     fb4:	89 b1       	in	r24, 0x09	; 9
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	89 b9       	out	0x09, r24	; 9
     fba:	89 b1       	in	r24, 0x09	; 9
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     fc0:	8d b1       	in	r24, 0x0d	; 13
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	8d b9       	out	0x0d, r24	; 13
     fc6:	8d b1       	in	r24, 0x0d	; 13
     fc8:	84 60       	ori	r24, 0x04	; 4
     fca:	8d b9       	out	0x0d, r24	; 13
     fcc:	8d b1       	in	r24, 0x0d	; 13
     fce:	88 60       	ori	r24, 0x08	; 8
     fd0:	8d b9       	out	0x0d, r24	; 13
     fd2:	8d b1       	in	r24, 0x0d	; 13
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	8d b9       	out	0x0d, r24	; 13
     fd8:	8d b1       	in	r24, 0x0d	; 13
     fda:	80 62       	ori	r24, 0x20	; 32
     fdc:	8d b9       	out	0x0d, r24	; 13
     fde:	8d b1       	in	r24, 0x0d	; 13
     fe0:	80 64       	ori	r24, 0x40	; 64
     fe2:	8d b9       	out	0x0d, r24	; 13
     fe4:	8d b1       	in	r24, 0x0d	; 13
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8d b9       	out	0x0d, r24	; 13
     fea:	8d b1       	in	r24, 0x0d	; 13
     fec:	80 61       	ori	r24, 0x10	; 16
     fee:	8d b9       	out	0x0d, r24	; 13
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
     ff0:	81 b3       	in	r24, 0x11	; 17
     ff2:	82 60       	ori	r24, 0x02	; 2
     ff4:	81 bb       	out	0x11, r24	; 17
     ff6:	81 b3       	in	r24, 0x11	; 17
     ff8:	84 60       	ori	r24, 0x04	; 4
     ffa:	81 bb       	out	0x11, r24	; 17
     ffc:	81 b3       	in	r24, 0x11	; 17
     ffe:	88 60       	ori	r24, 0x08	; 8
    1000:	81 bb       	out	0x11, r24	; 17
    1002:	81 b3       	in	r24, 0x11	; 17
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	81 bb       	out	0x11, r24	; 17
    1008:	81 b3       	in	r24, 0x11	; 17
    100a:	80 62       	ori	r24, 0x20	; 32
    100c:	81 bb       	out	0x11, r24	; 17
    100e:	81 b3       	in	r24, 0x11	; 17
    1010:	80 64       	ori	r24, 0x40	; 64
    1012:	81 bb       	out	0x11, r24	; 17
    1014:	81 b3       	in	r24, 0x11	; 17
    1016:	80 68       	ori	r24, 0x80	; 128
    1018:	81 bb       	out	0x11, r24	; 17
    101a:	81 b3       	in	r24, 0x11	; 17
    101c:	80 61       	ori	r24, 0x10	; 16
    101e:	81 bb       	out	0x11, r24	; 17
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    1020:	85 b3       	in	r24, 0x15	; 21
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	85 bb       	out	0x15, r24	; 21
    1026:	85 b3       	in	r24, 0x15	; 21
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	85 bb       	out	0x15, r24	; 21
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    102c:	81 b1       	in	r24, 0x01	; 1
    102e:	80 64       	ori	r24, 0x40	; 64
    1030:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    1032:	85 b3       	in	r24, 0x15	; 21
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	85 bb       	out	0x15, r24	; 21
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTG.OUT |= (1 << pin);
    1038:	89 b3       	in	r24, 0x19	; 25
    103a:	82 60       	ori	r24, 0x02	; 2
    103c:	89 bb       	out	0x19, r24	; 25
    103e:	89 b3       	in	r24, 0x19	; 25
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	89 bb       	out	0x19, r24	; 25
    1044:	89 b3       	in	r24, 0x19	; 25
    1046:	88 60       	ori	r24, 0x08	; 8
    1048:	89 bb       	out	0x19, r24	; 25
    104a:	89 b3       	in	r24, 0x19	; 25
    104c:	81 60       	ori	r24, 0x01	; 1
    104e:	89 bb       	out	0x19, r24	; 25
    1050:	89 b3       	in	r24, 0x19	; 25
    1052:	80 62       	ori	r24, 0x20	; 32
    1054:	89 bb       	out	0x19, r24	; 25
    1056:	89 b3       	in	r24, 0x19	; 25
    1058:	80 64       	ori	r24, 0x40	; 64
    105a:	89 bb       	out	0x19, r24	; 25
    105c:	89 b3       	in	r24, 0x19	; 25
    105e:	80 68       	ori	r24, 0x80	; 128
    1060:	89 bb       	out	0x19, r24	; 25
    1062:	89 b3       	in	r24, 0x19	; 25
    1064:	80 61       	ori	r24, 0x10	; 16
    1066:	89 bb       	out	0x19, r24	; 25
    1068:	08 95       	ret

0000106a <RGB_Set_color>:
		R10_set_level(true);
		W10_set_level(true);
}

void RGB_Set_color (uint8_t *arr)
{
    106a:	fc 01       	movw	r30, r24
	R1_set_level(((arr[0]>>0)&0x01));G1_set_level(((arr[0]>>1)&0x01));B1_set_level(((arr[0]>>2)&0x01));W1_set_level(((arr[0]>>3)&0x01));
    106c:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    106e:	80 ff       	sbrs	r24, 0
    1070:	04 c0       	rjmp	.+8      	; 0x107a <RGB_Set_color+0x10>
		VPORTB.OUT |= (1 << pin);
    1072:	85 b1       	in	r24, 0x05	; 5
    1074:	80 68       	ori	r24, 0x80	; 128
    1076:	85 b9       	out	0x05, r24	; 5
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <RGB_Set_color+0x16>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    107a:	85 b1       	in	r24, 0x05	; 5
    107c:	8f 77       	andi	r24, 0x7F	; 127
    107e:	85 b9       	out	0x05, r24	; 5
    1080:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1082:	81 ff       	sbrs	r24, 1
    1084:	04 c0       	rjmp	.+8      	; 0x108e <RGB_Set_color+0x24>
		VPORTB.OUT |= (1 << pin);
    1086:	85 b1       	in	r24, 0x05	; 5
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	85 b9       	out	0x05, r24	; 5
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <RGB_Set_color+0x2a>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    108e:	85 b1       	in	r24, 0x05	; 5
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	85 b9       	out	0x05, r24	; 5
    1094:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1096:	82 ff       	sbrs	r24, 2
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <RGB_Set_color+0x38>
		VPORTB.OUT |= (1 << pin);
    109a:	85 b1       	in	r24, 0x05	; 5
    109c:	80 62       	ori	r24, 0x20	; 32
    109e:	85 b9       	out	0x05, r24	; 5
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <RGB_Set_color+0x3e>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    10a2:	85 b1       	in	r24, 0x05	; 5
    10a4:	8f 7d       	andi	r24, 0xDF	; 223
    10a6:	85 b9       	out	0x05, r24	; 5
    10a8:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    10aa:	83 ff       	sbrs	r24, 3
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <RGB_Set_color+0x4c>
		VPORTB.OUT |= (1 << pin);
    10ae:	85 b1       	in	r24, 0x05	; 5
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	85 b9       	out	0x05, r24	; 5
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <RGB_Set_color+0x52>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    10b6:	85 b1       	in	r24, 0x05	; 5
    10b8:	8f 7e       	andi	r24, 0xEF	; 239
    10ba:	85 b9       	out	0x05, r24	; 5
	R2_set_level(((arr[0]>>4)&0x01));G2_set_level(((arr[0]>>5)&0x01));B2_set_level(((arr[0]>>6)&0x01));W2_set_level(((arr[0]>>7)&0x01));
    10bc:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    10be:	84 ff       	sbrs	r24, 4
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <RGB_Set_color+0x60>
		VPORTC.OUT |= (1 << pin);
    10c2:	89 b1       	in	r24, 0x09	; 9
    10c4:	88 60       	ori	r24, 0x08	; 8
    10c6:	89 b9       	out	0x09, r24	; 9
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <RGB_Set_color+0x66>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    10ca:	89 b1       	in	r24, 0x09	; 9
    10cc:	87 7f       	andi	r24, 0xF7	; 247
    10ce:	89 b9       	out	0x09, r24	; 9
    10d0:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    10d2:	85 ff       	sbrs	r24, 5
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <RGB_Set_color+0x74>
		VPORTC.OUT |= (1 << pin);
    10d6:	89 b1       	in	r24, 0x09	; 9
    10d8:	84 60       	ori	r24, 0x04	; 4
    10da:	89 b9       	out	0x09, r24	; 9
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <RGB_Set_color+0x7a>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    10de:	89 b1       	in	r24, 0x09	; 9
    10e0:	8b 7f       	andi	r24, 0xFB	; 251
    10e2:	89 b9       	out	0x09, r24	; 9
    10e4:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    10e6:	86 ff       	sbrs	r24, 6
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <RGB_Set_color+0x88>
		VPORTC.OUT |= (1 << pin);
    10ea:	89 b1       	in	r24, 0x09	; 9
    10ec:	82 60       	ori	r24, 0x02	; 2
    10ee:	89 b9       	out	0x09, r24	; 9
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <RGB_Set_color+0x8e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    10f2:	89 b1       	in	r24, 0x09	; 9
    10f4:	8d 7f       	andi	r24, 0xFD	; 253
    10f6:	89 b9       	out	0x09, r24	; 9
    10f8:	80 81       	ld	r24, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    10fa:	88 23       	and	r24, r24
    10fc:	24 f4       	brge	.+8      	; 0x1106 <RGB_Set_color+0x9c>
		VPORTC.OUT |= (1 << pin);
    10fe:	89 b1       	in	r24, 0x09	; 9
    1100:	81 60       	ori	r24, 0x01	; 1
    1102:	89 b9       	out	0x09, r24	; 9
    1104:	03 c0       	rjmp	.+6      	; 0x110c <RGB_Set_color+0xa2>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1106:	89 b1       	in	r24, 0x09	; 9
    1108:	8e 7f       	andi	r24, 0xFE	; 254
    110a:	89 b9       	out	0x09, r24	; 9
	R3_set_level(((arr[1]>>0)&0x01));G3_set_level(((arr[1]>>1)&0x01));B3_set_level(((arr[1]>>2)&0x01));W3_set_level(((arr[1]>>3)&0x01));
    110c:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    110e:	80 ff       	sbrs	r24, 0
    1110:	04 c0       	rjmp	.+8      	; 0x111a <RGB_Set_color+0xb0>
		VPORTC.OUT |= (1 << pin);
    1112:	89 b1       	in	r24, 0x09	; 9
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	89 b9       	out	0x09, r24	; 9
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <RGB_Set_color+0xb6>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    111a:	89 b1       	in	r24, 0x09	; 9
    111c:	8f 77       	andi	r24, 0x7F	; 127
    111e:	89 b9       	out	0x09, r24	; 9
    1120:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1122:	81 ff       	sbrs	r24, 1
    1124:	04 c0       	rjmp	.+8      	; 0x112e <RGB_Set_color+0xc4>
		VPORTC.OUT |= (1 << pin);
    1126:	89 b1       	in	r24, 0x09	; 9
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	89 b9       	out	0x09, r24	; 9
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <RGB_Set_color+0xca>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    112e:	89 b1       	in	r24, 0x09	; 9
    1130:	8f 7b       	andi	r24, 0xBF	; 191
    1132:	89 b9       	out	0x09, r24	; 9
    1134:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1136:	82 ff       	sbrs	r24, 2
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <RGB_Set_color+0xd8>
		VPORTC.OUT |= (1 << pin);
    113a:	89 b1       	in	r24, 0x09	; 9
    113c:	80 62       	ori	r24, 0x20	; 32
    113e:	89 b9       	out	0x09, r24	; 9
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <RGB_Set_color+0xde>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1142:	89 b1       	in	r24, 0x09	; 9
    1144:	8f 7d       	andi	r24, 0xDF	; 223
    1146:	89 b9       	out	0x09, r24	; 9
    1148:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    114a:	83 ff       	sbrs	r24, 3
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <RGB_Set_color+0xec>
		VPORTC.OUT |= (1 << pin);
    114e:	89 b1       	in	r24, 0x09	; 9
    1150:	80 61       	ori	r24, 0x10	; 16
    1152:	89 b9       	out	0x09, r24	; 9
    1154:	03 c0       	rjmp	.+6      	; 0x115c <RGB_Set_color+0xf2>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1156:	89 b1       	in	r24, 0x09	; 9
    1158:	8f 7e       	andi	r24, 0xEF	; 239
    115a:	89 b9       	out	0x09, r24	; 9
	R4_set_level(((arr[1]>>4)&0x01));G4_set_level(((arr[1]>>5)&0x01));B4_set_level(((arr[1]>>6)&0x01));W4_set_level(((arr[1]>>7)&0x01));
    115c:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    115e:	84 ff       	sbrs	r24, 4
    1160:	04 c0       	rjmp	.+8      	; 0x116a <RGB_Set_color+0x100>
		VPORTD.OUT |= (1 << pin);
    1162:	8d b1       	in	r24, 0x0d	; 13
    1164:	88 60       	ori	r24, 0x08	; 8
    1166:	8d b9       	out	0x0d, r24	; 13
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <RGB_Set_color+0x106>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    116a:	8d b1       	in	r24, 0x0d	; 13
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	8d b9       	out	0x0d, r24	; 13
    1170:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1172:	85 ff       	sbrs	r24, 5
    1174:	04 c0       	rjmp	.+8      	; 0x117e <RGB_Set_color+0x114>
		VPORTD.OUT |= (1 << pin);
    1176:	8d b1       	in	r24, 0x0d	; 13
    1178:	84 60       	ori	r24, 0x04	; 4
    117a:	8d b9       	out	0x0d, r24	; 13
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <RGB_Set_color+0x11a>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    117e:	8d b1       	in	r24, 0x0d	; 13
    1180:	8b 7f       	andi	r24, 0xFB	; 251
    1182:	8d b9       	out	0x0d, r24	; 13
    1184:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1186:	86 ff       	sbrs	r24, 6
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <RGB_Set_color+0x128>
		VPORTD.OUT |= (1 << pin);
    118a:	8d b1       	in	r24, 0x0d	; 13
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	8d b9       	out	0x0d, r24	; 13
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <RGB_Set_color+0x12e>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    1192:	8d b1       	in	r24, 0x0d	; 13
    1194:	8d 7f       	andi	r24, 0xFD	; 253
    1196:	8d b9       	out	0x0d, r24	; 13
    1198:	81 81       	ldd	r24, Z+1	; 0x01
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    119a:	88 23       	and	r24, r24
    119c:	24 f4       	brge	.+8      	; 0x11a6 <RGB_Set_color+0x13c>
		VPORTD.OUT |= (1 << pin);
    119e:	8d b1       	in	r24, 0x0d	; 13
    11a0:	81 60       	ori	r24, 0x01	; 1
    11a2:	8d b9       	out	0x0d, r24	; 13
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <RGB_Set_color+0x142>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    11a6:	8d b1       	in	r24, 0x0d	; 13
    11a8:	8e 7f       	andi	r24, 0xFE	; 254
    11aa:	8d b9       	out	0x0d, r24	; 13
	R5_set_level(((arr[2]>>0)&0x01));G5_set_level(((arr[2]>>1)&0x01));B5_set_level(((arr[2]>>2)&0x01));W5_set_level(((arr[2]>>3)&0x01));
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    11ae:	80 ff       	sbrs	r24, 0
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <RGB_Set_color+0x150>
		VPORTD.OUT |= (1 << pin);
    11b2:	8d b1       	in	r24, 0x0d	; 13
    11b4:	80 68       	ori	r24, 0x80	; 128
    11b6:	8d b9       	out	0x0d, r24	; 13
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <RGB_Set_color+0x156>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    11ba:	8d b1       	in	r24, 0x0d	; 13
    11bc:	8f 77       	andi	r24, 0x7F	; 127
    11be:	8d b9       	out	0x0d, r24	; 13
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    11c2:	81 ff       	sbrs	r24, 1
    11c4:	04 c0       	rjmp	.+8      	; 0x11ce <RGB_Set_color+0x164>
		VPORTD.OUT |= (1 << pin);
    11c6:	8d b1       	in	r24, 0x0d	; 13
    11c8:	80 64       	ori	r24, 0x40	; 64
    11ca:	8d b9       	out	0x0d, r24	; 13
    11cc:	03 c0       	rjmp	.+6      	; 0x11d4 <RGB_Set_color+0x16a>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    11ce:	8d b1       	in	r24, 0x0d	; 13
    11d0:	8f 7b       	andi	r24, 0xBF	; 191
    11d2:	8d b9       	out	0x0d, r24	; 13
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    11d6:	82 ff       	sbrs	r24, 2
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <RGB_Set_color+0x178>
		VPORTD.OUT |= (1 << pin);
    11da:	8d b1       	in	r24, 0x0d	; 13
    11dc:	80 62       	ori	r24, 0x20	; 32
    11de:	8d b9       	out	0x0d, r24	; 13
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <RGB_Set_color+0x17e>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    11e2:	8d b1       	in	r24, 0x0d	; 13
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	8d b9       	out	0x0d, r24	; 13
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    11ea:	83 ff       	sbrs	r24, 3
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <RGB_Set_color+0x18c>
		VPORTD.OUT |= (1 << pin);
    11ee:	8d b1       	in	r24, 0x0d	; 13
    11f0:	80 61       	ori	r24, 0x10	; 16
    11f2:	8d b9       	out	0x0d, r24	; 13
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <RGB_Set_color+0x192>
	} else {
		VPORTD.OUT &= ~(1 << pin);
    11f6:	8d b1       	in	r24, 0x0d	; 13
    11f8:	8f 7e       	andi	r24, 0xEF	; 239
    11fa:	8d b9       	out	0x0d, r24	; 13
	R6_set_level(((arr[2]>>4)&0x01));G6_set_level(((arr[2]>>5)&0x01));B6_set_level(((arr[2]>>6)&0x01));W6_set_level(((arr[2]>>7)&0x01));
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    11fe:	84 ff       	sbrs	r24, 4
    1200:	04 c0       	rjmp	.+8      	; 0x120a <RGB_Set_color+0x1a0>
		VPORTE.OUT |= (1 << pin);
    1202:	81 b3       	in	r24, 0x11	; 17
    1204:	88 60       	ori	r24, 0x08	; 8
    1206:	81 bb       	out	0x11, r24	; 17
    1208:	03 c0       	rjmp	.+6      	; 0x1210 <RGB_Set_color+0x1a6>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    120a:	81 b3       	in	r24, 0x11	; 17
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	81 bb       	out	0x11, r24	; 17
    1210:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1212:	85 ff       	sbrs	r24, 5
    1214:	04 c0       	rjmp	.+8      	; 0x121e <RGB_Set_color+0x1b4>
		VPORTE.OUT |= (1 << pin);
    1216:	81 b3       	in	r24, 0x11	; 17
    1218:	84 60       	ori	r24, 0x04	; 4
    121a:	81 bb       	out	0x11, r24	; 17
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <RGB_Set_color+0x1ba>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    121e:	81 b3       	in	r24, 0x11	; 17
    1220:	8b 7f       	andi	r24, 0xFB	; 251
    1222:	81 bb       	out	0x11, r24	; 17
    1224:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1226:	86 ff       	sbrs	r24, 6
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <RGB_Set_color+0x1c8>
		VPORTE.OUT |= (1 << pin);
    122a:	81 b3       	in	r24, 0x11	; 17
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	81 bb       	out	0x11, r24	; 17
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <RGB_Set_color+0x1ce>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    1232:	81 b3       	in	r24, 0x11	; 17
    1234:	8d 7f       	andi	r24, 0xFD	; 253
    1236:	81 bb       	out	0x11, r24	; 17
    1238:	82 81       	ldd	r24, Z+2	; 0x02
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    123a:	88 23       	and	r24, r24
    123c:	24 f4       	brge	.+8      	; 0x1246 <RGB_Set_color+0x1dc>
		VPORTE.OUT |= (1 << pin);
    123e:	81 b3       	in	r24, 0x11	; 17
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	81 bb       	out	0x11, r24	; 17
    1244:	03 c0       	rjmp	.+6      	; 0x124c <RGB_Set_color+0x1e2>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    1246:	81 b3       	in	r24, 0x11	; 17
    1248:	8e 7f       	andi	r24, 0xFE	; 254
    124a:	81 bb       	out	0x11, r24	; 17
	R7_set_level(((arr[3]>>0)&0x01));G7_set_level(((arr[3]>>1)&0x01));B7_set_level(((arr[3]>>2)&0x01));W7_set_level(((arr[3]>>3)&0x01));
    124c:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    124e:	80 ff       	sbrs	r24, 0
    1250:	04 c0       	rjmp	.+8      	; 0x125a <RGB_Set_color+0x1f0>
		VPORTE.OUT |= (1 << pin);
    1252:	81 b3       	in	r24, 0x11	; 17
    1254:	80 68       	ori	r24, 0x80	; 128
    1256:	81 bb       	out	0x11, r24	; 17
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <RGB_Set_color+0x1f6>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    125a:	81 b3       	in	r24, 0x11	; 17
    125c:	8f 77       	andi	r24, 0x7F	; 127
    125e:	81 bb       	out	0x11, r24	; 17
    1260:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1262:	81 ff       	sbrs	r24, 1
    1264:	04 c0       	rjmp	.+8      	; 0x126e <RGB_Set_color+0x204>
		VPORTE.OUT |= (1 << pin);
    1266:	81 b3       	in	r24, 0x11	; 17
    1268:	80 64       	ori	r24, 0x40	; 64
    126a:	81 bb       	out	0x11, r24	; 17
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <RGB_Set_color+0x20a>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    126e:	81 b3       	in	r24, 0x11	; 17
    1270:	8f 7b       	andi	r24, 0xBF	; 191
    1272:	81 bb       	out	0x11, r24	; 17
    1274:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1276:	82 ff       	sbrs	r24, 2
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <RGB_Set_color+0x218>
		VPORTE.OUT |= (1 << pin);
    127a:	81 b3       	in	r24, 0x11	; 17
    127c:	80 62       	ori	r24, 0x20	; 32
    127e:	81 bb       	out	0x11, r24	; 17
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <RGB_Set_color+0x21e>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    1282:	81 b3       	in	r24, 0x11	; 17
    1284:	8f 7d       	andi	r24, 0xDF	; 223
    1286:	81 bb       	out	0x11, r24	; 17
    1288:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    128a:	83 ff       	sbrs	r24, 3
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <RGB_Set_color+0x22c>
		VPORTE.OUT |= (1 << pin);
    128e:	81 b3       	in	r24, 0x11	; 17
    1290:	80 61       	ori	r24, 0x10	; 16
    1292:	81 bb       	out	0x11, r24	; 17
    1294:	03 c0       	rjmp	.+6      	; 0x129c <RGB_Set_color+0x232>
	} else {
		VPORTE.OUT &= ~(1 << pin);
    1296:	81 b3       	in	r24, 0x11	; 17
    1298:	8f 7e       	andi	r24, 0xEF	; 239
    129a:	81 bb       	out	0x11, r24	; 17
	R8_set_level(((arr[3]>>4)&0x01));G8_set_level(((arr[3]>>5)&0x01));B8_set_level(((arr[3]>>6)&0x01));W8_set_level(((arr[3]>>7)&0x01));
    129c:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    129e:	84 ff       	sbrs	r24, 4
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <RGB_Set_color+0x240>
		VPORTA.OUT |= (1 << pin);
    12a2:	81 b1       	in	r24, 0x01	; 1
    12a4:	80 64       	ori	r24, 0x40	; 64
    12a6:	81 b9       	out	0x01, r24	; 1
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <RGB_Set_color+0x246>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    12aa:	81 b1       	in	r24, 0x01	; 1
    12ac:	8f 7b       	andi	r24, 0xBF	; 191
    12ae:	81 b9       	out	0x01, r24	; 1
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    12b2:	85 ff       	sbrs	r24, 5
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <RGB_Set_color+0x254>
		VPORTF.OUT |= (1 << pin);
    12b6:	85 b3       	in	r24, 0x15	; 21
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	85 bb       	out	0x15, r24	; 21
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <RGB_Set_color+0x25a>
	} else {
		VPORTF.OUT &= ~(1 << pin);
    12be:	85 b3       	in	r24, 0x15	; 21
    12c0:	8b 7f       	andi	r24, 0xFB	; 251
    12c2:	85 bb       	out	0x15, r24	; 21
    12c4:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    12c6:	86 ff       	sbrs	r24, 6
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <RGB_Set_color+0x268>
		VPORTF.OUT |= (1 << pin);
    12ca:	85 b3       	in	r24, 0x15	; 21
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	85 bb       	out	0x15, r24	; 21
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <RGB_Set_color+0x26e>
	} else {
		VPORTF.OUT &= ~(1 << pin);
    12d2:	85 b3       	in	r24, 0x15	; 21
    12d4:	8d 7f       	andi	r24, 0xFD	; 253
    12d6:	85 bb       	out	0x15, r24	; 21
    12d8:	83 81       	ldd	r24, Z+3	; 0x03
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    12da:	88 23       	and	r24, r24
    12dc:	24 f4       	brge	.+8      	; 0x12e6 <RGB_Set_color+0x27c>
		VPORTF.OUT |= (1 << pin);
    12de:	85 b3       	in	r24, 0x15	; 21
    12e0:	81 60       	ori	r24, 0x01	; 1
    12e2:	85 bb       	out	0x15, r24	; 21
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <RGB_Set_color+0x282>
	} else {
		VPORTF.OUT &= ~(1 << pin);
    12e6:	85 b3       	in	r24, 0x15	; 21
    12e8:	8e 7f       	andi	r24, 0xFE	; 254
    12ea:	85 bb       	out	0x15, r24	; 21
	R9_set_level(((arr[4]>>0)&0x01));G9_set_level(((arr[4]>>1)&0x01));B9_set_level(((arr[4]>>2)&0x01));W9_set_level(((arr[4]>>3)&0x01));
    12ec:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    12ee:	80 ff       	sbrs	r24, 0
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <RGB_Set_color+0x290>
		VPORTG.OUT |= (1 << pin);
    12f2:	89 b3       	in	r24, 0x19	; 25
    12f4:	88 60       	ori	r24, 0x08	; 8
    12f6:	89 bb       	out	0x19, r24	; 25
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <RGB_Set_color+0x296>
	} else {
		VPORTG.OUT &= ~(1 << pin);
    12fa:	89 b3       	in	r24, 0x19	; 25
    12fc:	87 7f       	andi	r24, 0xF7	; 247
    12fe:	89 bb       	out	0x19, r24	; 25
    1300:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1302:	81 ff       	sbrs	r24, 1
    1304:	04 c0       	rjmp	.+8      	; 0x130e <RGB_Set_color+0x2a4>
		VPORTG.OUT |= (1 << pin);
    1306:	89 b3       	in	r24, 0x19	; 25
    1308:	84 60       	ori	r24, 0x04	; 4
    130a:	89 bb       	out	0x19, r24	; 25
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <RGB_Set_color+0x2aa>
	} else {
		VPORTG.OUT &= ~(1 << pin);
    130e:	89 b3       	in	r24, 0x19	; 25
    1310:	8b 7f       	andi	r24, 0xFB	; 251
    1312:	89 bb       	out	0x19, r24	; 25
    1314:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1316:	82 ff       	sbrs	r24, 2
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <RGB_Set_color+0x2b8>
		VPORTG.OUT |= (1 << pin);
    131a:	89 b3       	in	r24, 0x19	; 25
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	89 bb       	out	0x19, r24	; 25
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <RGB_Set_color+0x2be>
	} else {
		VPORTG.OUT &= ~(1 << pin);
    1322:	89 b3       	in	r24, 0x19	; 25
    1324:	8d 7f       	andi	r24, 0xFD	; 253
    1326:	89 bb       	out	0x19, r24	; 25
    1328:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    132a:	83 ff       	sbrs	r24, 3
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <RGB_Set_color+0x2cc>
		VPORTG.OUT |= (1 << pin);
    132e:	89 b3       	in	r24, 0x19	; 25
    1330:	81 60       	ori	r24, 0x01	; 1
    1332:	89 bb       	out	0x19, r24	; 25
    1334:	03 c0       	rjmp	.+6      	; 0x133c <RGB_Set_color+0x2d2>
	} else {
		VPORTG.OUT &= ~(1 << pin);
    1336:	89 b3       	in	r24, 0x19	; 25
    1338:	8e 7f       	andi	r24, 0xFE	; 254
    133a:	89 bb       	out	0x19, r24	; 25
	R10_set_level(((arr[4]>>4)&0x01));G10_set_level(((arr[4]>>5)&0x01));B10_set_level(((arr[4]>>6)&0x01));W10_set_level(((arr[4]>>7)&0x01));
    133c:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    133e:	84 ff       	sbrs	r24, 4
    1340:	04 c0       	rjmp	.+8      	; 0x134a <RGB_Set_color+0x2e0>
		VPORTG.OUT |= (1 << pin);
    1342:	89 b3       	in	r24, 0x19	; 25
    1344:	80 68       	ori	r24, 0x80	; 128
    1346:	89 bb       	out	0x19, r24	; 25
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <RGB_Set_color+0x2e6>
	} else {
		VPORTG.OUT &= ~(1 << pin);
    134a:	89 b3       	in	r24, 0x19	; 25
    134c:	8f 77       	andi	r24, 0x7F	; 127
    134e:	89 bb       	out	0x19, r24	; 25
    1350:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1352:	85 ff       	sbrs	r24, 5
    1354:	04 c0       	rjmp	.+8      	; 0x135e <RGB_Set_color+0x2f4>
		VPORTG.OUT |= (1 << pin);
    1356:	89 b3       	in	r24, 0x19	; 25
    1358:	80 64       	ori	r24, 0x40	; 64
    135a:	89 bb       	out	0x19, r24	; 25
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <RGB_Set_color+0x2fa>
	} else {
		VPORTG.OUT &= ~(1 << pin);
    135e:	89 b3       	in	r24, 0x19	; 25
    1360:	8f 7b       	andi	r24, 0xBF	; 191
    1362:	89 bb       	out	0x19, r24	; 25
    1364:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1366:	86 ff       	sbrs	r24, 6
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <RGB_Set_color+0x308>
		VPORTG.OUT |= (1 << pin);
    136a:	89 b3       	in	r24, 0x19	; 25
    136c:	80 62       	ori	r24, 0x20	; 32
    136e:	89 bb       	out	0x19, r24	; 25
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <RGB_Set_color+0x30e>
	} else {
		VPORTG.OUT &= ~(1 << pin);
    1372:	89 b3       	in	r24, 0x19	; 25
    1374:	8f 7d       	andi	r24, 0xDF	; 223
    1376:	89 bb       	out	0x19, r24	; 25
    1378:	84 81       	ldd	r24, Z+4	; 0x04
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTG_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    137a:	88 23       	and	r24, r24
    137c:	24 f4       	brge	.+8      	; 0x1386 <RGB_Set_color+0x31c>
		VPORTG.OUT |= (1 << pin);
    137e:	89 b3       	in	r24, 0x19	; 25
    1380:	80 61       	ori	r24, 0x10	; 16
    1382:	89 bb       	out	0x19, r24	; 25
    1384:	08 95       	ret
	} else {
		VPORTG.OUT &= ~(1 << pin);
    1386:	89 b3       	in	r24, 0x19	; 25
    1388:	8f 7e       	andi	r24, 0xEF	; 239
    138a:	89 bb       	out	0x19, r24	; 25
    138c:	08 95       	ret

0000138e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	08 95       	ret

00001392 <TIMER_0_init>:
{
	// TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */
	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */
	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */
	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */
	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp       /* Auto Lock Update: disabled */
    1392:	e0 e0       	ldi	r30, 0x00	; 0
    1394:	fa e0       	ldi	r31, 0x0A	; 10
    1396:	80 e1       	ldi	r24, 0x10	; 16
    1398:	81 83       	std	Z+1, r24	; 0x01
	// TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTAEI_bp /* Count on Event Input A: disabled */
	//		 | 0 << TCA_SINGLE_CNTBEI_bp /* Count on Event Input B: disabled */
	//		 | TCA_SINGLE_EVACTA_CNT_POSEDGE_gc /* Count on positive edge event */
	//		 | TCA_SINGLE_EVACTB_UPDOWN_gc; /* Count on prescaled clock. Event controls count direction. Up-count when
	// event line is 0, down-count when event line is 1. */
	TCA0.SINGLE.INTCTRL = 1 << TCA_SINGLE_CMP0_bp      /* Compare 0 Interrupt: enabled */
    139a:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP1_bp    /* Compare 1 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_CMP2_bp    /* Compare 2 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_OVF_bp;    /* Overflow Interrupt: disabled */
	 TCA0.SINGLE.PER = 39070/100;                      /* Period: top value 0xffff *///39069 equal to 1 second
    139c:	86 e8       	ldi	r24, 0x86	; 134
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	86 a3       	std	Z+38, r24	; 0x26
    13a2:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV256_gc    /* System Clock / 256 */
    13a4:	8d e0       	ldi	r24, 0x0D	; 13
    13a6:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp    /* Module Enable: enabled */
	                    | 0 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: disabled */
	return 0;
}
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	08 95       	ret

000013ac <counter_get>:
volatile uint8_t counter=0;

uint8_t counter_get(void)
{
	return counter;
    13ac:	80 91 cd 60 	lds	r24, 0x60CD	; 0x8060cd <counter>
}
    13b0:	08 95       	ret

000013b2 <counter_clear>:
void counter_clear(void)
{
	counter=0;
    13b2:	10 92 cd 60 	sts	0x60CD, r1	; 0x8060cd <counter>
    13b6:	08 95       	ret

000013b8 <__vector_11>:
}
ISR(TCA0_CMP0_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	8f 93       	push	r24
	/* Insert your TCA Compare 0 Interrupt handling code here */
	//status_led_toggle_level();
	counter++;
    13c4:	80 91 cd 60 	lds	r24, 0x60CD	; 0x8060cd <counter>
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	80 93 cd 60 	sts	0x60CD, r24	; 0x8060cd <counter>
	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
    13ce:	80 e1       	ldi	r24, 0x10	; 16
    13d0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
    13d4:	8f 91       	pop	r24
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <USART_0_init>:
uint8_t USART_1_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
    13e0:	e0 e0       	ldi	r30, 0x00	; 0
    13e2:	f8 e0       	ldi	r31, 0x08	; 8
    13e4:	86 eb       	ldi	r24, 0xB6	; 182
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	80 87       	std	Z+8, r24	; 0x08
    13ea:	91 87       	std	Z+9, r25	; 0x09
    13ec:	80 ec       	ldi	r24, 0xC0	; 192
    13ee:	86 83       	std	Z+6, r24	; 0x06
    13f0:	84 e2       	ldi	r24, 0x24	; 36
    13f2:	90 e6       	ldi	r25, 0x60	; 96
    13f4:	80 93 12 61 	sts	0x6112, r24	; 0x806112 <__iob+0x2>
    13f8:	90 93 13 61 	sts	0x6113, r25	; 0x806113 <__iob+0x3>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	08 95       	ret

00001400 <USART_0_write>:
    1400:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    1404:	95 ff       	sbrs	r25, 5
    1406:	fc cf       	rjmp	.-8      	; 0x1400 <USART_0_write>
    1408:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
    140c:	08 95       	ret

0000140e <USART_0_printCHAR>:
    140e:	0e 94 00 0a 	call	0x1400	; 0x1400 <USART_0_write>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	08 95       	ret

00001418 <comm_chk_sum>:
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	ec 01       	movw	r28, r24
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	07 c0       	rjmp	.+14     	; 0x1432 <comm_chk_sum+0x1a>
    1424:	de 01       	movw	r26, r28
    1426:	a6 0f       	add	r26, r22
    1428:	b1 1d       	adc	r27, r1
    142a:	9c 91       	ld	r25, X
    142c:	e9 0f       	add	r30, r25
    142e:	f1 1d       	adc	r31, r1
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	64 17       	cp	r22, r20
    1434:	b8 f3       	brcs	.-18     	; 0x1424 <comm_chk_sum+0xc>
    1436:	21 11       	cpse	r18, r1
    1438:	02 c0       	rjmp	.+4      	; 0x143e <comm_chk_sum+0x26>
    143a:	8f 2f       	mov	r24, r31
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <comm_chk_sum+0x28>
    143e:	8e 2f       	mov	r24, r30
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	08 95       	ret

00001446 <comm_get_RXbuffer>:
    1446:	e8 2f       	mov	r30, r24
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	e8 52       	subi	r30, 0x28	; 40
    144c:	ff 49       	sbci	r31, 0x9F	; 159
    144e:	80 81       	ld	r24, Z
    1450:	08 95       	ret

00001452 <new_fram_status_flag_get>:
    1452:	80 91 ce 60 	lds	r24, 0x60CE	; 0x8060ce <new_fram_status_flag>
    1456:	08 95       	ret

00001458 <new_fram_status_flag_clear>:
    1458:	10 92 ce 60 	sts	0x60CE, r1	; 0x8060ce <new_fram_status_flag>
    145c:	08 95       	ret

0000145e <USART_1_init>:
    145e:	e0 e6       	ldi	r30, 0x60	; 96
    1460:	f8 e0       	ldi	r31, 0x08	; 8
    1462:	86 eb       	ldi	r24, 0xB6	; 182
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	80 87       	std	Z+8, r24	; 0x08
    1468:	91 87       	std	Z+9, r25	; 0x09
    146a:	80 e8       	ldi	r24, 0x80	; 128
    146c:	85 83       	std	Z+5, r24	; 0x05
    146e:	80 ec       	ldi	r24, 0xC0	; 192
    1470:	86 83       	std	Z+6, r24	; 0x06
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	08 95       	ret

00001476 <USART_1_write>:
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
    1476:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7f0864>
    147a:	95 ff       	sbrs	r25, 5
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <USART_1_write>
		;
	USART3.TXDATAL = data;
    147e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f0862>
    1482:	08 95       	ret

00001484 <comm_set_data>:
void new_fram_status_flag_clear(void)
{
	new_fram_status_flag=0;
}
void comm_set_data( uint16_t data)
{
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
	for (unsigned char i=0;i<TX_FRAME_SIZE;i++) {USART_1_txbuf[i]=0x00;}
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <comm_set_data+0x14>
    148c:	e2 2f       	mov	r30, r18
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	ef 52       	subi	r30, 0x2F	; 47
    1492:	ff 49       	sbci	r31, 0x9F	; 159
    1494:	10 82       	st	Z, r1
    1496:	2f 5f       	subi	r18, 0xFF	; 255
    1498:	27 30       	cpi	r18, 0x07	; 7
    149a:	c0 f3       	brcs	.-16     	; 0x148c <comm_set_data+0x8>
	USART_1_txbuf[TX_HEADER]=COMM_FRAME_HEADER;
    149c:	c1 ed       	ldi	r28, 0xD1	; 209
    149e:	d0 e6       	ldi	r29, 0x60	; 96
    14a0:	2e e1       	ldi	r18, 0x1E	; 30
    14a2:	28 83       	st	Y, r18
	USART_1_txbuf[TX_SOURCE_ID]=COMM_SOURCE_ID;
    14a4:	2c ed       	ldi	r18, 0xDC	; 220
    14a6:	29 83       	std	Y+1, r18	; 0x01
	USART_1_txbuf[TX_DESTINATION_ID]=COMM_DESTINATION_ID;
    14a8:	2c ea       	ldi	r18, 0xAC	; 172
    14aa:	2a 83       	std	Y+2, r18	; 0x02
	USART_1_txbuf[TX_ROW_HIGH]=(uint8_t)((data>>8)&0xFF);
    14ac:	9b 83       	std	Y+3, r25	; 0x03
	USART_1_txbuf[TX_ROW_LOW]=(uint8_t)(data&0xFF);
    14ae:	8c 83       	std	Y+4, r24	; 0x04
	USART_1_txbuf[TX_CHECK_SUM_EVEN]=comm_chk_sum(USART_1_txbuf,3,TX_FRAME_SIZE-2,EVEN);
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	45 e0       	ldi	r20, 0x05	; 5
    14b4:	63 e0       	ldi	r22, 0x03	; 3
    14b6:	ce 01       	movw	r24, r28
    14b8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <comm_chk_sum>
    14bc:	8e 83       	std	Y+6, r24	; 0x06
	USART_1_txbuf[TX_CHECK_SUM_ODD]=comm_chk_sum(USART_1_txbuf,3,TX_FRAME_SIZE-2,ODD);
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	45 e0       	ldi	r20, 0x05	; 5
    14c2:	63 e0       	ldi	r22, 0x03	; 3
    14c4:	ce 01       	movw	r24, r28
    14c6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <comm_chk_sum>
    14ca:	8d 83       	std	Y+5, r24	; 0x05
	for (uint8_t i=0;i<TX_FRAME_SIZE;i++)USART_1_write(USART_1_txbuf[i]);
    14cc:	c0 e0       	ldi	r28, 0x00	; 0
    14ce:	08 c0       	rjmp	.+16     	; 0x14e0 <comm_set_data+0x5c>
    14d0:	ec 2f       	mov	r30, r28
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	ef 52       	subi	r30, 0x2F	; 47
    14d6:	ff 49       	sbci	r31, 0x9F	; 159
    14d8:	80 81       	ld	r24, Z
    14da:	0e 94 3b 0a 	call	0x1476	; 0x1476 <USART_1_write>
    14de:	cf 5f       	subi	r28, 0xFF	; 255
    14e0:	c7 30       	cpi	r28, 0x07	; 7
    14e2:	b0 f3       	brcs	.-20     	; 0x14d0 <comm_set_data+0x4c>
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <USART_1_default_rx_isr_cb>:
void USART_1_default_rx_isr_cb(void)
{
    14ea:	cf 93       	push	r28
	uint8_t data;
	/* Read the received data */
	data = USART3.RXDATAL;
    14ec:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f0860>
	//USART_0_write(data);
	//receiving my message
	if (frheader == 0x03)
    14f0:	90 91 d0 60 	lds	r25, 0x60D0	; 0x8060d0 <frheader>
    14f4:	93 30       	cpi	r25, 0x03	; 3
    14f6:	a9 f5       	brne	.+106    	; 0x1562 <USART_1_default_rx_isr_cb+0x78>
	{
		USART_1_rxbuf[frcount] = data;
    14f8:	e0 91 cf 60 	lds	r30, 0x60CF	; 0x8060cf <frcount>
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	e8 52       	subi	r30, 0x28	; 40
    1500:	ff 49       	sbci	r31, 0x9F	; 159
    1502:	80 83       	st	Z, r24
		if (frcount == RX_FRAME_SIZE-1)
    1504:	80 91 cf 60 	lds	r24, 0x60CF	; 0x8060cf <frcount>
    1508:	87 33       	cpi	r24, 0x37	; 55
    150a:	29 f5       	brne	.+74     	; 0x1556 <USART_1_default_rx_isr_cb+0x6c>
		{
			if((USART_1_rxbuf[RX_CHECK_SUM_EVEN]==comm_chk_sum(USART_1_rxbuf,0,RX_FRAME_SIZE-2,EVEN))
    150c:	c0 91 0f 61 	lds	r28, 0x610F	; 0x80610f <USART_1_rxbuf+0x37>
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	46 e3       	ldi	r20, 0x36	; 54
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	88 ed       	ldi	r24, 0xD8	; 216
    1518:	90 e6       	ldi	r25, 0x60	; 96
    151a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <comm_chk_sum>
    151e:	c8 13       	cpse	r28, r24
    1520:	15 c0       	rjmp	.+42     	; 0x154c <USART_1_default_rx_isr_cb+0x62>
			&&(USART_1_rxbuf[RX_CHECK_SUM_ODD]==comm_chk_sum(USART_1_rxbuf,0,RX_FRAME_SIZE-2,ODD)))
    1522:	c0 91 0e 61 	lds	r28, 0x610E	; 0x80610e <USART_1_rxbuf+0x36>
    1526:	21 e0       	ldi	r18, 0x01	; 1
    1528:	46 e3       	ldi	r20, 0x36	; 54
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	88 ed       	ldi	r24, 0xD8	; 216
    152e:	90 e6       	ldi	r25, 0x60	; 96
    1530:	0e 94 0c 0a 	call	0x1418	; 0x1418 <comm_chk_sum>
    1534:	c8 13       	cpse	r28, r24
    1536:	0a c0       	rjmp	.+20     	; 0x154c <USART_1_default_rx_isr_cb+0x62>
			{
				USART_1_write(0x06);	//send acknowledge
    1538:	86 e0       	ldi	r24, 0x06	; 6
    153a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <USART_1_write>
				if (USART_1_rxbuf[RX_CON_COMMAND]==0x5)
    153e:	80 91 0d 61 	lds	r24, 0x610D	; 0x80610d <USART_1_rxbuf+0x35>
    1542:	85 30       	cpi	r24, 0x05	; 5
    1544:	19 f4       	brne	.+6      	; 0x154c <USART_1_default_rx_isr_cb+0x62>
				{
					new_fram_status_flag=true;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 ce 60 	sts	0x60CE, r24	; 0x8060ce <new_fram_status_flag>
					//printf("Data is correct\r\n");
				}	
			}
			//else printf("ERROR\r\n");
			frheader = 0; frcount = 0;
    154c:	10 92 d0 60 	sts	0x60D0, r1	; 0x8060d0 <frheader>
    1550:	10 92 cf 60 	sts	0x60CF, r1	; 0x8060cf <frcount>
    1554:	28 c0       	rjmp	.+80     	; 0x15a6 <USART_1_default_rx_isr_cb+0xbc>
		}
		else
		{
			frcount++;
    1556:	80 91 cf 60 	lds	r24, 0x60CF	; 0x8060cf <frcount>
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	80 93 cf 60 	sts	0x60CF, r24	; 0x8060cf <frcount>
    1560:	22 c0       	rjmp	.+68     	; 0x15a6 <USART_1_default_rx_isr_cb+0xbc>
		}
	}
	else
	{
		if ((frheader == 0x02)&&(data ==COMM_SOURCE_ID)){frheader = 0x03;/*printf("COMM DESTINATION ID verify\r\n");*/}
    1562:	90 91 d0 60 	lds	r25, 0x60D0	; 0x8060d0 <frheader>
    1566:	92 30       	cpi	r25, 0x02	; 2
    1568:	29 f4       	brne	.+10     	; 0x1574 <USART_1_default_rx_isr_cb+0x8a>
    156a:	8c 3d       	cpi	r24, 0xDC	; 220
    156c:	19 f4       	brne	.+6      	; 0x1574 <USART_1_default_rx_isr_cb+0x8a>
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	90 93 d0 60 	sts	0x60D0, r25	; 0x8060d0 <frheader>
		if ((frheader == 0x01)&&(data==COMM_DESTINATION_ID)){frheader = 0x02;/*printf("COMM SOURCE ID verify\r\n");*/}else if (frheader == 0x01){frheader = 0;}
    1574:	90 91 d0 60 	lds	r25, 0x60D0	; 0x8060d0 <frheader>
    1578:	91 30       	cpi	r25, 0x01	; 1
    157a:	31 f4       	brne	.+12     	; 0x1588 <USART_1_default_rx_isr_cb+0x9e>
    157c:	8c 3a       	cpi	r24, 0xAC	; 172
    157e:	21 f4       	brne	.+8      	; 0x1588 <USART_1_default_rx_isr_cb+0x9e>
    1580:	92 e0       	ldi	r25, 0x02	; 2
    1582:	90 93 d0 60 	sts	0x60D0, r25	; 0x8060d0 <frheader>
    1586:	06 c0       	rjmp	.+12     	; 0x1594 <USART_1_default_rx_isr_cb+0xaa>
    1588:	90 91 d0 60 	lds	r25, 0x60D0	; 0x8060d0 <frheader>
    158c:	91 30       	cpi	r25, 0x01	; 1
    158e:	11 f4       	brne	.+4      	; 0x1594 <USART_1_default_rx_isr_cb+0xaa>
    1590:	10 92 d0 60 	sts	0x60D0, r1	; 0x8060d0 <frheader>
		if ((frheader == 0x00)&&(data == COMM_FRAME_HEADER)){frheader = 0x01;/*printf("COMM FRAME HEADER capture\r\n");*/}
    1594:	90 91 d0 60 	lds	r25, 0x60D0	; 0x8060d0 <frheader>
    1598:	91 11       	cpse	r25, r1
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <USART_1_default_rx_isr_cb+0xbc>
    159c:	8e 31       	cpi	r24, 0x1E	; 30
    159e:	19 f4       	brne	.+6      	; 0x15a6 <USART_1_default_rx_isr_cb+0xbc>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 d0 60 	sts	0x60D0, r24	; 0x8060d0 <frheader>
	}	
}
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <__vector_53>:
ISR(USART3_RXC_vect)
{
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	6f 93       	push	r22
    15be:	7f 93       	push	r23
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
	//uint8_t data;
	///* Read the received data */
	//data = USART3.RXDATAL;
	//USART_0_write(data);
	USART_1_default_rx_isr_cb();
    15cc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <USART_1_default_rx_isr_cb>
}
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <printf>:
    15f2:	a0 e0       	ldi	r26, 0x00	; 0
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ef ef       	ldi	r30, 0xFF	; 255
    15f8:	fa e0       	ldi	r31, 0x0A	; 10
    15fa:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__prologue_saves__+0x20>
    15fe:	ae 01       	movw	r20, r28
    1600:	4b 5f       	subi	r20, 0xFB	; 251
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	fa 01       	movw	r30, r20
    1606:	61 91       	ld	r22, Z+
    1608:	71 91       	ld	r23, Z+
    160a:	af 01       	movw	r20, r30
    160c:	80 91 12 61 	lds	r24, 0x6112	; 0x806112 <__iob+0x2>
    1610:	90 91 13 61 	lds	r25, 0x6113	; 0x806113 <__iob+0x3>
    1614:	0e 94 0f 0b 	call	0x161e	; 0x161e <vfprintf>
    1618:	e2 e0       	ldi	r30, 0x02	; 2
    161a:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__epilogue_restores__+0x20>

0000161e <vfprintf>:
    161e:	ab e0       	ldi	r26, 0x0B	; 11
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e1       	ldi	r30, 0x15	; 21
    1624:	fb e0       	ldi	r31, 0x0B	; 11
    1626:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__prologue_saves__>
    162a:	6c 01       	movw	r12, r24
    162c:	7b 01       	movw	r14, r22
    162e:	8a 01       	movw	r16, r20
    1630:	fc 01       	movw	r30, r24
    1632:	16 82       	std	Z+6, r1	; 0x06
    1634:	17 82       	std	Z+7, r1	; 0x07
    1636:	83 81       	ldd	r24, Z+3	; 0x03
    1638:	81 ff       	sbrs	r24, 1
    163a:	cc c1       	rjmp	.+920    	; 0x19d4 <vfprintf+0x3b6>
    163c:	ce 01       	movw	r24, r28
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	3c 01       	movw	r6, r24
    1642:	f6 01       	movw	r30, r12
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	f7 01       	movw	r30, r14
    1648:	93 fd       	sbrc	r25, 3
    164a:	85 91       	lpm	r24, Z+
    164c:	93 ff       	sbrs	r25, 3
    164e:	81 91       	ld	r24, Z+
    1650:	7f 01       	movw	r14, r30
    1652:	88 23       	and	r24, r24
    1654:	09 f4       	brne	.+2      	; 0x1658 <vfprintf+0x3a>
    1656:	ba c1       	rjmp	.+884    	; 0x19cc <vfprintf+0x3ae>
    1658:	85 32       	cpi	r24, 0x25	; 37
    165a:	39 f4       	brne	.+14     	; 0x166a <vfprintf+0x4c>
    165c:	93 fd       	sbrc	r25, 3
    165e:	85 91       	lpm	r24, Z+
    1660:	93 ff       	sbrs	r25, 3
    1662:	81 91       	ld	r24, Z+
    1664:	7f 01       	movw	r14, r30
    1666:	85 32       	cpi	r24, 0x25	; 37
    1668:	29 f4       	brne	.+10     	; 0x1674 <vfprintf+0x56>
    166a:	b6 01       	movw	r22, r12
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    1672:	e7 cf       	rjmp	.-50     	; 0x1642 <vfprintf+0x24>
    1674:	91 2c       	mov	r9, r1
    1676:	21 2c       	mov	r2, r1
    1678:	31 2c       	mov	r3, r1
    167a:	ff e1       	ldi	r31, 0x1F	; 31
    167c:	f3 15       	cp	r31, r3
    167e:	d8 f0       	brcs	.+54     	; 0x16b6 <vfprintf+0x98>
    1680:	8b 32       	cpi	r24, 0x2B	; 43
    1682:	79 f0       	breq	.+30     	; 0x16a2 <vfprintf+0x84>
    1684:	38 f4       	brcc	.+14     	; 0x1694 <vfprintf+0x76>
    1686:	80 32       	cpi	r24, 0x20	; 32
    1688:	79 f0       	breq	.+30     	; 0x16a8 <vfprintf+0x8a>
    168a:	83 32       	cpi	r24, 0x23	; 35
    168c:	a1 f4       	brne	.+40     	; 0x16b6 <vfprintf+0x98>
    168e:	23 2d       	mov	r18, r3
    1690:	20 61       	ori	r18, 0x10	; 16
    1692:	1d c0       	rjmp	.+58     	; 0x16ce <vfprintf+0xb0>
    1694:	8d 32       	cpi	r24, 0x2D	; 45
    1696:	61 f0       	breq	.+24     	; 0x16b0 <vfprintf+0x92>
    1698:	80 33       	cpi	r24, 0x30	; 48
    169a:	69 f4       	brne	.+26     	; 0x16b6 <vfprintf+0x98>
    169c:	23 2d       	mov	r18, r3
    169e:	21 60       	ori	r18, 0x01	; 1
    16a0:	16 c0       	rjmp	.+44     	; 0x16ce <vfprintf+0xb0>
    16a2:	83 2d       	mov	r24, r3
    16a4:	82 60       	ori	r24, 0x02	; 2
    16a6:	38 2e       	mov	r3, r24
    16a8:	e3 2d       	mov	r30, r3
    16aa:	e4 60       	ori	r30, 0x04	; 4
    16ac:	3e 2e       	mov	r3, r30
    16ae:	2a c0       	rjmp	.+84     	; 0x1704 <vfprintf+0xe6>
    16b0:	f3 2d       	mov	r31, r3
    16b2:	f8 60       	ori	r31, 0x08	; 8
    16b4:	1d c0       	rjmp	.+58     	; 0x16f0 <vfprintf+0xd2>
    16b6:	37 fc       	sbrc	r3, 7
    16b8:	2d c0       	rjmp	.+90     	; 0x1714 <vfprintf+0xf6>
    16ba:	20 ed       	ldi	r18, 0xD0	; 208
    16bc:	28 0f       	add	r18, r24
    16be:	2a 30       	cpi	r18, 0x0A	; 10
    16c0:	40 f0       	brcs	.+16     	; 0x16d2 <vfprintf+0xb4>
    16c2:	8e 32       	cpi	r24, 0x2E	; 46
    16c4:	b9 f4       	brne	.+46     	; 0x16f4 <vfprintf+0xd6>
    16c6:	36 fc       	sbrc	r3, 6
    16c8:	81 c1       	rjmp	.+770    	; 0x19cc <vfprintf+0x3ae>
    16ca:	23 2d       	mov	r18, r3
    16cc:	20 64       	ori	r18, 0x40	; 64
    16ce:	32 2e       	mov	r3, r18
    16d0:	19 c0       	rjmp	.+50     	; 0x1704 <vfprintf+0xe6>
    16d2:	36 fe       	sbrs	r3, 6
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <vfprintf+0xc4>
    16d6:	8a e0       	ldi	r24, 0x0A	; 10
    16d8:	98 9e       	mul	r9, r24
    16da:	20 0d       	add	r18, r0
    16dc:	11 24       	eor	r1, r1
    16de:	92 2e       	mov	r9, r18
    16e0:	11 c0       	rjmp	.+34     	; 0x1704 <vfprintf+0xe6>
    16e2:	ea e0       	ldi	r30, 0x0A	; 10
    16e4:	2e 9e       	mul	r2, r30
    16e6:	20 0d       	add	r18, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	22 2e       	mov	r2, r18
    16ec:	f3 2d       	mov	r31, r3
    16ee:	f0 62       	ori	r31, 0x20	; 32
    16f0:	3f 2e       	mov	r3, r31
    16f2:	08 c0       	rjmp	.+16     	; 0x1704 <vfprintf+0xe6>
    16f4:	8c 36       	cpi	r24, 0x6C	; 108
    16f6:	21 f4       	brne	.+8      	; 0x1700 <vfprintf+0xe2>
    16f8:	83 2d       	mov	r24, r3
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	38 2e       	mov	r3, r24
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0xe6>
    1700:	88 36       	cpi	r24, 0x68	; 104
    1702:	41 f4       	brne	.+16     	; 0x1714 <vfprintf+0xf6>
    1704:	f7 01       	movw	r30, r14
    1706:	93 fd       	sbrc	r25, 3
    1708:	85 91       	lpm	r24, Z+
    170a:	93 ff       	sbrs	r25, 3
    170c:	81 91       	ld	r24, Z+
    170e:	7f 01       	movw	r14, r30
    1710:	81 11       	cpse	r24, r1
    1712:	b3 cf       	rjmp	.-154    	; 0x167a <vfprintf+0x5c>
    1714:	98 2f       	mov	r25, r24
    1716:	9f 7d       	andi	r25, 0xDF	; 223
    1718:	95 54       	subi	r25, 0x45	; 69
    171a:	93 30       	cpi	r25, 0x03	; 3
    171c:	28 f4       	brcc	.+10     	; 0x1728 <vfprintf+0x10a>
    171e:	0c 5f       	subi	r16, 0xFC	; 252
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	9f e3       	ldi	r25, 0x3F	; 63
    1724:	99 83       	std	Y+1, r25	; 0x01
    1726:	0d c0       	rjmp	.+26     	; 0x1742 <vfprintf+0x124>
    1728:	83 36       	cpi	r24, 0x63	; 99
    172a:	31 f0       	breq	.+12     	; 0x1738 <vfprintf+0x11a>
    172c:	83 37       	cpi	r24, 0x73	; 115
    172e:	71 f0       	breq	.+28     	; 0x174c <vfprintf+0x12e>
    1730:	83 35       	cpi	r24, 0x53	; 83
    1732:	09 f0       	breq	.+2      	; 0x1736 <vfprintf+0x118>
    1734:	59 c0       	rjmp	.+178    	; 0x17e8 <vfprintf+0x1ca>
    1736:	21 c0       	rjmp	.+66     	; 0x177a <vfprintf+0x15c>
    1738:	f8 01       	movw	r30, r16
    173a:	80 81       	ld	r24, Z
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	0e 5f       	subi	r16, 0xFE	; 254
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	88 24       	eor	r8, r8
    1744:	83 94       	inc	r8
    1746:	91 2c       	mov	r9, r1
    1748:	53 01       	movw	r10, r6
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <vfprintf+0x154>
    174c:	28 01       	movw	r4, r16
    174e:	f2 e0       	ldi	r31, 0x02	; 2
    1750:	4f 0e       	add	r4, r31
    1752:	51 1c       	adc	r5, r1
    1754:	f8 01       	movw	r30, r16
    1756:	a0 80       	ld	r10, Z
    1758:	b1 80       	ldd	r11, Z+1	; 0x01
    175a:	36 fe       	sbrs	r3, 6
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <vfprintf+0x146>
    175e:	69 2d       	mov	r22, r9
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x14a>
    1764:	6f ef       	ldi	r22, 0xFF	; 255
    1766:	7f ef       	ldi	r23, 0xFF	; 255
    1768:	c5 01       	movw	r24, r10
    176a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <strnlen>
    176e:	4c 01       	movw	r8, r24
    1770:	82 01       	movw	r16, r4
    1772:	f3 2d       	mov	r31, r3
    1774:	ff 77       	andi	r31, 0x7F	; 127
    1776:	3f 2e       	mov	r3, r31
    1778:	16 c0       	rjmp	.+44     	; 0x17a6 <vfprintf+0x188>
    177a:	28 01       	movw	r4, r16
    177c:	22 e0       	ldi	r18, 0x02	; 2
    177e:	42 0e       	add	r4, r18
    1780:	51 1c       	adc	r5, r1
    1782:	f8 01       	movw	r30, r16
    1784:	a0 80       	ld	r10, Z
    1786:	b1 80       	ldd	r11, Z+1	; 0x01
    1788:	36 fe       	sbrs	r3, 6
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <vfprintf+0x174>
    178c:	69 2d       	mov	r22, r9
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x178>
    1792:	6f ef       	ldi	r22, 0xFF	; 255
    1794:	7f ef       	ldi	r23, 0xFF	; 255
    1796:	c5 01       	movw	r24, r10
    1798:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <strnlen_P>
    179c:	4c 01       	movw	r8, r24
    179e:	f3 2d       	mov	r31, r3
    17a0:	f0 68       	ori	r31, 0x80	; 128
    17a2:	3f 2e       	mov	r3, r31
    17a4:	82 01       	movw	r16, r4
    17a6:	33 fc       	sbrc	r3, 3
    17a8:	1b c0       	rjmp	.+54     	; 0x17e0 <vfprintf+0x1c2>
    17aa:	82 2d       	mov	r24, r2
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	88 16       	cp	r8, r24
    17b0:	99 06       	cpc	r9, r25
    17b2:	b0 f4       	brcc	.+44     	; 0x17e0 <vfprintf+0x1c2>
    17b4:	b6 01       	movw	r22, r12
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    17be:	2a 94       	dec	r2
    17c0:	f4 cf       	rjmp	.-24     	; 0x17aa <vfprintf+0x18c>
    17c2:	f5 01       	movw	r30, r10
    17c4:	37 fc       	sbrc	r3, 7
    17c6:	85 91       	lpm	r24, Z+
    17c8:	37 fe       	sbrs	r3, 7
    17ca:	81 91       	ld	r24, Z+
    17cc:	5f 01       	movw	r10, r30
    17ce:	b6 01       	movw	r22, r12
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    17d6:	21 10       	cpse	r2, r1
    17d8:	2a 94       	dec	r2
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	82 1a       	sub	r8, r18
    17de:	91 08       	sbc	r9, r1
    17e0:	81 14       	cp	r8, r1
    17e2:	91 04       	cpc	r9, r1
    17e4:	71 f7       	brne	.-36     	; 0x17c2 <vfprintf+0x1a4>
    17e6:	e8 c0       	rjmp	.+464    	; 0x19b8 <vfprintf+0x39a>
    17e8:	84 36       	cpi	r24, 0x64	; 100
    17ea:	11 f0       	breq	.+4      	; 0x17f0 <vfprintf+0x1d2>
    17ec:	89 36       	cpi	r24, 0x69	; 105
    17ee:	41 f5       	brne	.+80     	; 0x1840 <vfprintf+0x222>
    17f0:	f8 01       	movw	r30, r16
    17f2:	37 fe       	sbrs	r3, 7
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <vfprintf+0x1e6>
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	93 81       	ldd	r25, Z+3	; 0x03
    17fe:	0c 5f       	subi	r16, 0xFC	; 252
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	08 c0       	rjmp	.+16     	; 0x1814 <vfprintf+0x1f6>
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	07 2e       	mov	r0, r23
    180a:	00 0c       	add	r0, r0
    180c:	88 0b       	sbc	r24, r24
    180e:	99 0b       	sbc	r25, r25
    1810:	0e 5f       	subi	r16, 0xFE	; 254
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	f3 2d       	mov	r31, r3
    1816:	ff 76       	andi	r31, 0x6F	; 111
    1818:	3f 2e       	mov	r3, r31
    181a:	97 ff       	sbrs	r25, 7
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <vfprintf+0x212>
    181e:	90 95       	com	r25
    1820:	80 95       	com	r24
    1822:	70 95       	com	r23
    1824:	61 95       	neg	r22
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	8f 4f       	sbci	r24, 0xFF	; 255
    182a:	9f 4f       	sbci	r25, 0xFF	; 255
    182c:	f0 68       	ori	r31, 0x80	; 128
    182e:	3f 2e       	mov	r3, r31
    1830:	2a e0       	ldi	r18, 0x0A	; 10
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	a3 01       	movw	r20, r6
    1836:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__ultoa_invert>
    183a:	88 2e       	mov	r8, r24
    183c:	86 18       	sub	r8, r6
    183e:	45 c0       	rjmp	.+138    	; 0x18ca <vfprintf+0x2ac>
    1840:	85 37       	cpi	r24, 0x75	; 117
    1842:	31 f4       	brne	.+12     	; 0x1850 <vfprintf+0x232>
    1844:	23 2d       	mov	r18, r3
    1846:	2f 7e       	andi	r18, 0xEF	; 239
    1848:	b2 2e       	mov	r11, r18
    184a:	2a e0       	ldi	r18, 0x0A	; 10
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	25 c0       	rjmp	.+74     	; 0x189a <vfprintf+0x27c>
    1850:	93 2d       	mov	r25, r3
    1852:	99 7f       	andi	r25, 0xF9	; 249
    1854:	b9 2e       	mov	r11, r25
    1856:	8f 36       	cpi	r24, 0x6F	; 111
    1858:	c1 f0       	breq	.+48     	; 0x188a <vfprintf+0x26c>
    185a:	18 f4       	brcc	.+6      	; 0x1862 <vfprintf+0x244>
    185c:	88 35       	cpi	r24, 0x58	; 88
    185e:	79 f0       	breq	.+30     	; 0x187e <vfprintf+0x260>
    1860:	b5 c0       	rjmp	.+362    	; 0x19cc <vfprintf+0x3ae>
    1862:	80 37       	cpi	r24, 0x70	; 112
    1864:	19 f0       	breq	.+6      	; 0x186c <vfprintf+0x24e>
    1866:	88 37       	cpi	r24, 0x78	; 120
    1868:	21 f0       	breq	.+8      	; 0x1872 <vfprintf+0x254>
    186a:	b0 c0       	rjmp	.+352    	; 0x19cc <vfprintf+0x3ae>
    186c:	e9 2f       	mov	r30, r25
    186e:	e0 61       	ori	r30, 0x10	; 16
    1870:	be 2e       	mov	r11, r30
    1872:	b4 fe       	sbrs	r11, 4
    1874:	0d c0       	rjmp	.+26     	; 0x1890 <vfprintf+0x272>
    1876:	fb 2d       	mov	r31, r11
    1878:	f4 60       	ori	r31, 0x04	; 4
    187a:	bf 2e       	mov	r11, r31
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <vfprintf+0x272>
    187e:	34 fe       	sbrs	r3, 4
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <vfprintf+0x278>
    1882:	29 2f       	mov	r18, r25
    1884:	26 60       	ori	r18, 0x06	; 6
    1886:	b2 2e       	mov	r11, r18
    1888:	06 c0       	rjmp	.+12     	; 0x1896 <vfprintf+0x278>
    188a:	28 e0       	ldi	r18, 0x08	; 8
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	05 c0       	rjmp	.+10     	; 0x189a <vfprintf+0x27c>
    1890:	20 e1       	ldi	r18, 0x10	; 16
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <vfprintf+0x27c>
    1896:	20 e1       	ldi	r18, 0x10	; 16
    1898:	32 e0       	ldi	r19, 0x02	; 2
    189a:	f8 01       	movw	r30, r16
    189c:	b7 fe       	sbrs	r11, 7
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <vfprintf+0x290>
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	0c 5f       	subi	r16, 0xFC	; 252
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <vfprintf+0x29c>
    18ae:	60 81       	ld	r22, Z
    18b0:	71 81       	ldd	r23, Z+1	; 0x01
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 5f       	subi	r16, 0xFE	; 254
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	a3 01       	movw	r20, r6
    18bc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__ultoa_invert>
    18c0:	88 2e       	mov	r8, r24
    18c2:	86 18       	sub	r8, r6
    18c4:	fb 2d       	mov	r31, r11
    18c6:	ff 77       	andi	r31, 0x7F	; 127
    18c8:	3f 2e       	mov	r3, r31
    18ca:	36 fe       	sbrs	r3, 6
    18cc:	0d c0       	rjmp	.+26     	; 0x18e8 <vfprintf+0x2ca>
    18ce:	23 2d       	mov	r18, r3
    18d0:	2e 7f       	andi	r18, 0xFE	; 254
    18d2:	a2 2e       	mov	r10, r18
    18d4:	89 14       	cp	r8, r9
    18d6:	58 f4       	brcc	.+22     	; 0x18ee <vfprintf+0x2d0>
    18d8:	34 fe       	sbrs	r3, 4
    18da:	0b c0       	rjmp	.+22     	; 0x18f2 <vfprintf+0x2d4>
    18dc:	32 fc       	sbrc	r3, 2
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <vfprintf+0x2d4>
    18e0:	83 2d       	mov	r24, r3
    18e2:	8e 7e       	andi	r24, 0xEE	; 238
    18e4:	a8 2e       	mov	r10, r24
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <vfprintf+0x2d4>
    18e8:	b8 2c       	mov	r11, r8
    18ea:	a3 2c       	mov	r10, r3
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <vfprintf+0x2d6>
    18ee:	b8 2c       	mov	r11, r8
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <vfprintf+0x2d6>
    18f2:	b9 2c       	mov	r11, r9
    18f4:	a4 fe       	sbrs	r10, 4
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <vfprintf+0x2f8>
    18f8:	fe 01       	movw	r30, r28
    18fa:	e8 0d       	add	r30, r8
    18fc:	f1 1d       	adc	r31, r1
    18fe:	80 81       	ld	r24, Z
    1900:	80 33       	cpi	r24, 0x30	; 48
    1902:	21 f4       	brne	.+8      	; 0x190c <vfprintf+0x2ee>
    1904:	9a 2d       	mov	r25, r10
    1906:	99 7e       	andi	r25, 0xE9	; 233
    1908:	a9 2e       	mov	r10, r25
    190a:	09 c0       	rjmp	.+18     	; 0x191e <vfprintf+0x300>
    190c:	a2 fe       	sbrs	r10, 2
    190e:	06 c0       	rjmp	.+12     	; 0x191c <vfprintf+0x2fe>
    1910:	b3 94       	inc	r11
    1912:	b3 94       	inc	r11
    1914:	04 c0       	rjmp	.+8      	; 0x191e <vfprintf+0x300>
    1916:	8a 2d       	mov	r24, r10
    1918:	86 78       	andi	r24, 0x86	; 134
    191a:	09 f0       	breq	.+2      	; 0x191e <vfprintf+0x300>
    191c:	b3 94       	inc	r11
    191e:	a3 fc       	sbrc	r10, 3
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <vfprintf+0x326>
    1922:	a0 fe       	sbrs	r10, 0
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <vfprintf+0x314>
    1926:	b2 14       	cp	r11, r2
    1928:	88 f4       	brcc	.+34     	; 0x194c <vfprintf+0x32e>
    192a:	28 0c       	add	r2, r8
    192c:	92 2c       	mov	r9, r2
    192e:	9b 18       	sub	r9, r11
    1930:	0e c0       	rjmp	.+28     	; 0x194e <vfprintf+0x330>
    1932:	b2 14       	cp	r11, r2
    1934:	60 f4       	brcc	.+24     	; 0x194e <vfprintf+0x330>
    1936:	b6 01       	movw	r22, r12
    1938:	80 e2       	ldi	r24, 0x20	; 32
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    1940:	b3 94       	inc	r11
    1942:	f7 cf       	rjmp	.-18     	; 0x1932 <vfprintf+0x314>
    1944:	b2 14       	cp	r11, r2
    1946:	18 f4       	brcc	.+6      	; 0x194e <vfprintf+0x330>
    1948:	2b 18       	sub	r2, r11
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <vfprintf+0x332>
    194c:	98 2c       	mov	r9, r8
    194e:	21 2c       	mov	r2, r1
    1950:	a4 fe       	sbrs	r10, 4
    1952:	10 c0       	rjmp	.+32     	; 0x1974 <vfprintf+0x356>
    1954:	b6 01       	movw	r22, r12
    1956:	80 e3       	ldi	r24, 0x30	; 48
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    195e:	a2 fe       	sbrs	r10, 2
    1960:	17 c0       	rjmp	.+46     	; 0x1990 <vfprintf+0x372>
    1962:	a1 fc       	sbrc	r10, 1
    1964:	03 c0       	rjmp	.+6      	; 0x196c <vfprintf+0x34e>
    1966:	88 e7       	ldi	r24, 0x78	; 120
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0x352>
    196c:	88 e5       	ldi	r24, 0x58	; 88
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	b6 01       	movw	r22, r12
    1972:	0c c0       	rjmp	.+24     	; 0x198c <vfprintf+0x36e>
    1974:	8a 2d       	mov	r24, r10
    1976:	86 78       	andi	r24, 0x86	; 134
    1978:	59 f0       	breq	.+22     	; 0x1990 <vfprintf+0x372>
    197a:	a1 fe       	sbrs	r10, 1
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <vfprintf+0x364>
    197e:	8b e2       	ldi	r24, 0x2B	; 43
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <vfprintf+0x366>
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	a7 fc       	sbrc	r10, 7
    1986:	8d e2       	ldi	r24, 0x2D	; 45
    1988:	b6 01       	movw	r22, r12
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    1990:	89 14       	cp	r8, r9
    1992:	38 f4       	brcc	.+14     	; 0x19a2 <vfprintf+0x384>
    1994:	b6 01       	movw	r22, r12
    1996:	80 e3       	ldi	r24, 0x30	; 48
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    199e:	9a 94       	dec	r9
    19a0:	f7 cf       	rjmp	.-18     	; 0x1990 <vfprintf+0x372>
    19a2:	8a 94       	dec	r8
    19a4:	f3 01       	movw	r30, r6
    19a6:	e8 0d       	add	r30, r8
    19a8:	f1 1d       	adc	r31, r1
    19aa:	80 81       	ld	r24, Z
    19ac:	b6 01       	movw	r22, r12
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    19b4:	81 10       	cpse	r8, r1
    19b6:	f5 cf       	rjmp	.-22     	; 0x19a2 <vfprintf+0x384>
    19b8:	22 20       	and	r2, r2
    19ba:	09 f4       	brne	.+2      	; 0x19be <vfprintf+0x3a0>
    19bc:	42 ce       	rjmp	.-892    	; 0x1642 <vfprintf+0x24>
    19be:	b6 01       	movw	r22, r12
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <fputc>
    19c8:	2a 94       	dec	r2
    19ca:	f6 cf       	rjmp	.-20     	; 0x19b8 <vfprintf+0x39a>
    19cc:	f6 01       	movw	r30, r12
    19ce:	86 81       	ldd	r24, Z+6	; 0x06
    19d0:	97 81       	ldd	r25, Z+7	; 0x07
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0x3ba>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	2b 96       	adiw	r28, 0x0b	; 11
    19da:	e2 e1       	ldi	r30, 0x12	; 18
    19dc:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__epilogue_restores__>

000019e0 <strnlen_P>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	05 90       	lpm	r0, Z+
    19e4:	61 50       	subi	r22, 0x01	; 1
    19e6:	70 40       	sbci	r23, 0x00	; 0
    19e8:	01 10       	cpse	r0, r1
    19ea:	d8 f7       	brcc	.-10     	; 0x19e2 <strnlen_P+0x2>
    19ec:	80 95       	com	r24
    19ee:	90 95       	com	r25
    19f0:	8e 0f       	add	r24, r30
    19f2:	9f 1f       	adc	r25, r31
    19f4:	08 95       	ret

000019f6 <strnlen>:
    19f6:	fc 01       	movw	r30, r24
    19f8:	61 50       	subi	r22, 0x01	; 1
    19fa:	70 40       	sbci	r23, 0x00	; 0
    19fc:	01 90       	ld	r0, Z+
    19fe:	01 10       	cpse	r0, r1
    1a00:	d8 f7       	brcc	.-10     	; 0x19f8 <strnlen+0x2>
    1a02:	80 95       	com	r24
    1a04:	90 95       	com	r25
    1a06:	8e 0f       	add	r24, r30
    1a08:	9f 1f       	adc	r25, r31
    1a0a:	08 95       	ret

00001a0c <fputc>:
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	fb 01       	movw	r30, r22
    1a16:	23 81       	ldd	r18, Z+3	; 0x03
    1a18:	21 fd       	sbrc	r18, 1
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <fputc+0x16>
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	9f ef       	ldi	r25, 0xFF	; 255
    1a20:	2c c0       	rjmp	.+88     	; 0x1a7a <fputc+0x6e>
    1a22:	22 ff       	sbrs	r18, 2
    1a24:	16 c0       	rjmp	.+44     	; 0x1a52 <fputc+0x46>
    1a26:	46 81       	ldd	r20, Z+6	; 0x06
    1a28:	57 81       	ldd	r21, Z+7	; 0x07
    1a2a:	24 81       	ldd	r18, Z+4	; 0x04
    1a2c:	35 81       	ldd	r19, Z+5	; 0x05
    1a2e:	42 17       	cp	r20, r18
    1a30:	53 07       	cpc	r21, r19
    1a32:	44 f4       	brge	.+16     	; 0x1a44 <fputc+0x38>
    1a34:	a0 81       	ld	r26, Z
    1a36:	b1 81       	ldd	r27, Z+1	; 0x01
    1a38:	9d 01       	movw	r18, r26
    1a3a:	2f 5f       	subi	r18, 0xFF	; 255
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	20 83       	st	Z, r18
    1a40:	31 83       	std	Z+1, r19	; 0x01
    1a42:	8c 93       	st	X, r24
    1a44:	26 81       	ldd	r18, Z+6	; 0x06
    1a46:	37 81       	ldd	r19, Z+7	; 0x07
    1a48:	2f 5f       	subi	r18, 0xFF	; 255
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	26 83       	std	Z+6, r18	; 0x06
    1a4e:	37 83       	std	Z+7, r19	; 0x07
    1a50:	14 c0       	rjmp	.+40     	; 0x1a7a <fputc+0x6e>
    1a52:	8b 01       	movw	r16, r22
    1a54:	ec 01       	movw	r28, r24
    1a56:	fb 01       	movw	r30, r22
    1a58:	00 84       	ldd	r0, Z+8	; 0x08
    1a5a:	f1 85       	ldd	r31, Z+9	; 0x09
    1a5c:	e0 2d       	mov	r30, r0
    1a5e:	09 95       	icall
    1a60:	89 2b       	or	r24, r25
    1a62:	e1 f6       	brne	.-72     	; 0x1a1c <fputc+0x10>
    1a64:	d8 01       	movw	r26, r16
    1a66:	16 96       	adiw	r26, 0x06	; 6
    1a68:	8d 91       	ld	r24, X+
    1a6a:	9c 91       	ld	r25, X
    1a6c:	17 97       	sbiw	r26, 0x07	; 7
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	16 96       	adiw	r26, 0x06	; 6
    1a72:	8d 93       	st	X+, r24
    1a74:	9c 93       	st	X, r25
    1a76:	17 97       	sbiw	r26, 0x07	; 7
    1a78:	ce 01       	movw	r24, r28
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	08 95       	ret

00001a84 <__ultoa_invert>:
    1a84:	fa 01       	movw	r30, r20
    1a86:	aa 27       	eor	r26, r26
    1a88:	28 30       	cpi	r18, 0x08	; 8
    1a8a:	51 f1       	breq	.+84     	; 0x1ae0 <__ultoa_invert+0x5c>
    1a8c:	20 31       	cpi	r18, 0x10	; 16
    1a8e:	81 f1       	breq	.+96     	; 0x1af0 <__ultoa_invert+0x6c>
    1a90:	e8 94       	clt
    1a92:	6f 93       	push	r22
    1a94:	6e 7f       	andi	r22, 0xFE	; 254
    1a96:	6e 5f       	subi	r22, 0xFE	; 254
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	af 4f       	sbci	r26, 0xFF	; 255
    1aa0:	b1 e0       	ldi	r27, 0x01	; 1
    1aa2:	3e d0       	rcall	.+124    	; 0x1b20 <__ultoa_invert+0x9c>
    1aa4:	b4 e0       	ldi	r27, 0x04	; 4
    1aa6:	3c d0       	rcall	.+120    	; 0x1b20 <__ultoa_invert+0x9c>
    1aa8:	67 0f       	add	r22, r23
    1aaa:	78 1f       	adc	r23, r24
    1aac:	89 1f       	adc	r24, r25
    1aae:	9a 1f       	adc	r25, r26
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	68 0f       	add	r22, r24
    1ab4:	79 1f       	adc	r23, r25
    1ab6:	8a 1f       	adc	r24, r26
    1ab8:	91 1d       	adc	r25, r1
    1aba:	a1 1d       	adc	r26, r1
    1abc:	6a 0f       	add	r22, r26
    1abe:	71 1d       	adc	r23, r1
    1ac0:	81 1d       	adc	r24, r1
    1ac2:	91 1d       	adc	r25, r1
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	20 d0       	rcall	.+64     	; 0x1b08 <__ultoa_invert+0x84>
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <__ultoa_invert+0x48>
    1aca:	68 94       	set
    1acc:	3f 91       	pop	r19
    1ace:	2a e0       	ldi	r18, 0x0A	; 10
    1ad0:	26 9f       	mul	r18, r22
    1ad2:	11 24       	eor	r1, r1
    1ad4:	30 19       	sub	r19, r0
    1ad6:	30 5d       	subi	r19, 0xD0	; 208
    1ad8:	31 93       	st	Z+, r19
    1ada:	de f6       	brtc	.-74     	; 0x1a92 <__ultoa_invert+0xe>
    1adc:	cf 01       	movw	r24, r30
    1ade:	08 95       	ret
    1ae0:	46 2f       	mov	r20, r22
    1ae2:	47 70       	andi	r20, 0x07	; 7
    1ae4:	40 5d       	subi	r20, 0xD0	; 208
    1ae6:	41 93       	st	Z+, r20
    1ae8:	b3 e0       	ldi	r27, 0x03	; 3
    1aea:	0f d0       	rcall	.+30     	; 0x1b0a <__ultoa_invert+0x86>
    1aec:	c9 f7       	brne	.-14     	; 0x1ae0 <__ultoa_invert+0x5c>
    1aee:	f6 cf       	rjmp	.-20     	; 0x1adc <__ultoa_invert+0x58>
    1af0:	46 2f       	mov	r20, r22
    1af2:	4f 70       	andi	r20, 0x0F	; 15
    1af4:	40 5d       	subi	r20, 0xD0	; 208
    1af6:	4a 33       	cpi	r20, 0x3A	; 58
    1af8:	18 f0       	brcs	.+6      	; 0x1b00 <__ultoa_invert+0x7c>
    1afa:	49 5d       	subi	r20, 0xD9	; 217
    1afc:	31 fd       	sbrc	r19, 1
    1afe:	40 52       	subi	r20, 0x20	; 32
    1b00:	41 93       	st	Z+, r20
    1b02:	02 d0       	rcall	.+4      	; 0x1b08 <__ultoa_invert+0x84>
    1b04:	a9 f7       	brne	.-22     	; 0x1af0 <__ultoa_invert+0x6c>
    1b06:	ea cf       	rjmp	.-44     	; 0x1adc <__ultoa_invert+0x58>
    1b08:	b4 e0       	ldi	r27, 0x04	; 4
    1b0a:	a6 95       	lsr	r26
    1b0c:	97 95       	ror	r25
    1b0e:	87 95       	ror	r24
    1b10:	77 95       	ror	r23
    1b12:	67 95       	ror	r22
    1b14:	ba 95       	dec	r27
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__ultoa_invert+0x86>
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	61 05       	cpc	r22, r1
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	08 95       	ret
    1b20:	9b 01       	movw	r18, r22
    1b22:	ac 01       	movw	r20, r24
    1b24:	0a 2e       	mov	r0, r26
    1b26:	06 94       	lsr	r0
    1b28:	57 95       	ror	r21
    1b2a:	47 95       	ror	r20
    1b2c:	37 95       	ror	r19
    1b2e:	27 95       	ror	r18
    1b30:	ba 95       	dec	r27
    1b32:	c9 f7       	brne	.-14     	; 0x1b26 <__ultoa_invert+0xa2>
    1b34:	62 0f       	add	r22, r18
    1b36:	73 1f       	adc	r23, r19
    1b38:	84 1f       	adc	r24, r20
    1b3a:	95 1f       	adc	r25, r21
    1b3c:	a0 1d       	adc	r26, r0
    1b3e:	08 95       	ret

00001b40 <__prologue_saves__>:
    1b40:	2f 92       	push	r2
    1b42:	3f 92       	push	r3
    1b44:	4f 92       	push	r4
    1b46:	5f 92       	push	r5
    1b48:	6f 92       	push	r6
    1b4a:	7f 92       	push	r7
    1b4c:	8f 92       	push	r8
    1b4e:	9f 92       	push	r9
    1b50:	af 92       	push	r10
    1b52:	bf 92       	push	r11
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	ca 1b       	sub	r28, r26
    1b6a:	db 0b       	sbc	r29, r27
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	09 94       	ijmp

00001b72 <__epilogue_restores__>:
    1b72:	2a 88       	ldd	r2, Y+18	; 0x12
    1b74:	39 88       	ldd	r3, Y+17	; 0x11
    1b76:	48 88       	ldd	r4, Y+16	; 0x10
    1b78:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b80:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b82:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b84:	b9 84       	ldd	r11, Y+9	; 0x09
    1b86:	c8 84       	ldd	r12, Y+8	; 0x08
    1b88:	df 80       	ldd	r13, Y+7	; 0x07
    1b8a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b8c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b90:	1b 81       	ldd	r17, Y+3	; 0x03
    1b92:	aa 81       	ldd	r26, Y+2	; 0x02
    1b94:	b9 81       	ldd	r27, Y+1	; 0x01
    1b96:	ce 0f       	add	r28, r30
    1b98:	d1 1d       	adc	r29, r1
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	ed 01       	movw	r28, r26
    1ba0:	08 95       	ret

00001ba2 <_exit>:
    1ba2:	f8 94       	cli

00001ba4 <__stop_program>:
    1ba4:	ff cf       	rjmp	.-2      	; 0x1ba4 <__stop_program>
